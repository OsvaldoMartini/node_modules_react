{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildXml = exports.parseXml = undefined;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _sax = require('sax');\n\nvar _sax2 = _interopRequireDefault(_sax);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DEBUG = process.env.DEBUG_DOCX_TEMPLATES;\nvar log = DEBUG ? require('./debug').mainStory : null;\n\nvar parseXml = function parseXml(templateXml) {\n  var parser = _sax2.default.parser(true, {\n    // true for XML-like (false for HTML-like)\n    trim: false,\n    normalize: false\n  });\n\n  var template = void 0;\n  var curNode = null;\n  var numXmlElements = 0;\n  return new _promise2.default(function (resolve, reject) {\n    parser.onopentag = function (node) {\n      var newNode = {\n        _parent: curNode,\n        _children: [],\n        _fTextNode: false,\n        _tag: node.name,\n        _attrs: node.attributes\n      };\n      if (curNode != null) curNode._children.push(newNode);else template = newNode;\n      curNode = newNode;\n      numXmlElements += 1;\n    };\n\n    parser.onclosetag = function () {\n      curNode = curNode != null ? curNode._parent : null;\n    };\n\n    parser.ontext = function (text) {\n      if (curNode == null) return;\n\n      curNode._children.push({\n        _parent: curNode,\n        _children: [],\n        _fTextNode: true,\n        _text: text\n      });\n    };\n\n    parser.onend = function () {\n      DEBUG && log.debug('Number of XML elements: ' + numXmlElements);\n      resolve(template);\n    };\n\n    parser.onerror = function (err) {\n      reject(err);\n    };\n\n    parser.write(templateXml);\n    parser.end();\n  });\n};\n\nvar buildXml = function buildXml(node, options) {\n  var indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var xml = indent.length ? '' : '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>';\n  if (node._fTextNode) xml += sanitizeText(node._text, options);else {\n    var attrs = '';\n    var nodeAttrs = node._attrs;\n    (0, _keys2.default)(nodeAttrs).forEach(function (key) {\n      attrs += ' ' + key + '=\"' + sanitizeAttr(nodeAttrs[key]) + '\"';\n    });\n    var fHasChildren = node._children.length > 0;\n    var suffix = fHasChildren ? '' : '/';\n    xml += '\\n' + indent + '<' + node._tag + attrs + suffix + '>';\n    var fLastChildIsNode = false;\n\n    node._children.forEach(function (child) {\n      xml += buildXml(child, options, indent + '  ');\n      fLastChildIsNode = !child._fTextNode;\n    });\n\n    if (fHasChildren) {\n      var indent2 = fLastChildIsNode ? '\\n' + indent : '';\n      xml += indent2 + '</' + node._tag + '>';\n    }\n  }\n  return xml;\n};\n\nvar sanitizeText = function sanitizeText(str, options) {\n  var out = '';\n  var segments = str.split(options.literalXmlDelimiter);\n  var fLiteral = false;\n\n  for (var i = 0; i < segments.length; i++) {\n    var processedSegment = segments[i];\n\n    if (!fLiteral) {\n      processedSegment = processedSegment.replace(/&/g, '&amp;'); // must be the first one\n\n      processedSegment = processedSegment.replace(/</g, '&lt;');\n      processedSegment = processedSegment.replace(/>/g, '&gt;');\n    }\n\n    out += processedSegment;\n    fLiteral = !fLiteral;\n  }\n\n  return out;\n};\n\nvar sanitizeAttr = function sanitizeAttr(str) {\n  var out = str;\n  out = out.replace(/&/g, '&amp;'); // must be the first one\n\n  out = out.replace(/</g, '&lt;');\n  out = out.replace(/>/g, '&gt;');\n  out = out.replace(/'/g, '&apos;');\n  out = out.replace(/\"/g, '&quot;');\n  return out;\n}; // ==========================================\n// Public API\n// ==========================================\n\n\nexports.parseXml = parseXml;\nexports.buildXml = buildXml;","map":null,"metadata":{},"sourceType":"script"}