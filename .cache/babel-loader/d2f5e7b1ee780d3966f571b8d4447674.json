{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projetos\\\\PPMTool-React-Client\\\\src\\\\components\\\\CVBoard\\\\ProfileTasks\\\\UpdateProfileTask.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getProfileTask, updateProfileTask } from \"../../../actions/profileBacklogActions\";\nimport PropTypes from \"prop-types\";\nimport EducationForm from \"./TasksForms/EducationForm\";\nimport SkillsForm from \"./TasksForms/SkillsForm\";\nimport LanguageForm from \"./TasksForms/LanguageForm\";\nimport ClientProjectForm from \"./TasksForms/ClientProjectForm\";\n\nclass UpdateProfileTask extends Component {\n  constructor(props) {\n    super(props);\n    const _this$props$match$par = this.props.match.params,\n          profile_backlog_id = _this$props$match$par.profile_backlog_id,\n          pt_id = _this$props$match$par.pt_id,\n          taskType = _this$props$match$par.taskType;\n    this.state = {\n      taskType: taskType,\n      priority: 0,\n      profileIdentifier: profile_backlog_id,\n      profileSequence: pt_id,\n      totalYears: 0,\n      profile_task: {},\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    //const { profile_backlog_id, pt_id } = this.props.match.params;\n    this.props.getProfileTask(this.state.profileIdentifier, this.state.profileSequence, this.props.history);\n  } // componentWillReceiveProps(nextProps) {\n  //   if (nextProps.errors) {\n  //     this.setState({ errors: nextProps.errors });\n  //   }\n  //   if (nextProps.profile_task) {\n  //     this.setState({ profile_task: nextProps.profile_task });\n  //   }\n  //   // const {\n  //   //   id,\n  //   //   summary,\n  //   //   acceptanceCriteria,\n  //   //   taskType,\n  //   //   totalYears,\n  //   //   priority,\n  //   //   dueDate,\n  //   //   profileIdentifier,\n  //   //   profileSequence,\n  //   //   create_At\n  //   // } = nextProps.profile_task;\n  //   // this.setState({\n  //   //   id,\n  //   //   summary,\n  //   //   acceptanceCriteria,\n  //   //   taskType,\n  //   //   totalYears,\n  //   //   priority,\n  //   //   dueDate,\n  //   //   profileIdentifier,\n  //   //   profileSequence,\n  //   //   create_At\n  //   // });\n  // }\n\n\n  render() {\n    const _this$props$match$par2 = this.props.match.params,\n          profile_backlog_id = _this$props$match$par2.profile_backlog_id,\n          pt_id = _this$props$match$par2.pt_id,\n          taskType = _this$props$match$par2.taskType; //const { errors } = this.state;\n\n    const taskComponent = taskType => {\n      if (taskType === \"skill\") {\n        return React.createElement(SkillsForm, {\n          typeForm: \"Update\",\n          taskType: taskType,\n          history: this.props.history,\n          profileIdentifier: profile_backlog_id,\n          profileSequence: pt_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        });\n      } else if (taskType === \"educ\") {\n        return React.createElement(EducationForm, {\n          typeForm: \"Update\",\n          taskType: taskType,\n          history: this.props.history,\n          profileIdentifier: profile_backlog_id,\n          profileSequence: pt_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        });\n      } else if (taskType === \"lang\") {\n        return React.createElement(LanguageForm, {\n          typeForm: \"Update\",\n          taskType: taskType,\n          history: this.props.history,\n          profileIdentifier: profile_backlog_id,\n          profileSequence: pt_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        });\n      } else if (taskType === \"cliPrj\") {\n        return React.createElement(ClientProjectForm, {\n          typeForm: \"Update\",\n          taskType: taskType,\n          history: this.props.history,\n          profileIdentifier: profile_backlog_id,\n          profileSequence: pt_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n      }\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, taskComponent(taskType));\n  }\n\n}\n\nUpdateProfileTask.propTypes = {\n  getProfileTask: PropTypes.func.isRequired,\n  profile_task: PropTypes.object.isRequired,\n  updateProfileTask: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile_task: state.profileBacklog.profile_task,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  getProfileTask,\n  updateProfileTask\n})(UpdateProfileTask);","map":{"version":3,"sources":["D:\\Projetos\\PPMTool-React-Client\\src\\components\\CVBoard\\ProfileTasks\\UpdateProfileTask.js"],"names":["React","Component","connect","getProfileTask","updateProfileTask","PropTypes","EducationForm","SkillsForm","LanguageForm","ClientProjectForm","UpdateProfileTask","constructor","props","match","params","profile_backlog_id","pt_id","taskType","state","priority","profileIdentifier","profileSequence","totalYears","profile_task","errors","componentDidMount","history","render","taskComponent","propTypes","func","isRequired","object","mapStateToProps","profileBacklog"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getProfileTask,\r\n  updateProfileTask\r\n} from \"../../../actions/profileBacklogActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport EducationForm from \"./TasksForms/EducationForm\";\r\nimport SkillsForm from \"./TasksForms/SkillsForm\";\r\nimport LanguageForm from \"./TasksForms/LanguageForm\";\r\nimport ClientProjectForm from \"./TasksForms/ClientProjectForm\";\r\n\r\nclass UpdateProfileTask extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { profile_backlog_id, pt_id, taskType } = this.props.match.params;\r\n\r\n    this.state = {\r\n      taskType: taskType,\r\n      priority: 0,\r\n      profileIdentifier: profile_backlog_id,\r\n      profileSequence: pt_id,\r\n      totalYears: 0,\r\n      profile_task: {},\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //const { profile_backlog_id, pt_id } = this.props.match.params;\r\n    this.props.getProfileTask(\r\n      this.state.profileIdentifier,\r\n      this.state.profileSequence,\r\n      this.props.history\r\n    );\r\n  }\r\n\r\n  // componentWillReceiveProps(nextProps) {\r\n  //   if (nextProps.errors) {\r\n  //     this.setState({ errors: nextProps.errors });\r\n  //   }\r\n\r\n  //   if (nextProps.profile_task) {\r\n  //     this.setState({ profile_task: nextProps.profile_task });\r\n  //   }\r\n\r\n  //   // const {\r\n  //   //   id,\r\n  //   //   summary,\r\n  //   //   acceptanceCriteria,\r\n  //   //   taskType,\r\n  //   //   totalYears,\r\n  //   //   priority,\r\n  //   //   dueDate,\r\n  //   //   profileIdentifier,\r\n  //   //   profileSequence,\r\n  //   //   create_At\r\n  //   // } = nextProps.profile_task;\r\n\r\n  //   // this.setState({\r\n  //   //   id,\r\n  //   //   summary,\r\n  //   //   acceptanceCriteria,\r\n  //   //   taskType,\r\n  //   //   totalYears,\r\n  //   //   priority,\r\n  //   //   dueDate,\r\n  //   //   profileIdentifier,\r\n  //   //   profileSequence,\r\n  //   //   create_At\r\n  //   // });\r\n  // }\r\n\r\n  render() {\r\n    const { profile_backlog_id, pt_id, taskType } = this.props.match.params;\r\n    //const { errors } = this.state;\r\n\r\n    const taskComponent = taskType => {\r\n      if (taskType === \"skill\") {\r\n        return (\r\n          <SkillsForm\r\n            typeForm=\"Update\"\r\n            taskType={taskType}\r\n            history={this.props.history}\r\n            profileIdentifier={profile_backlog_id}\r\n            profileSequence={pt_id}\r\n          />\r\n        );\r\n      } else if (taskType === \"educ\") {\r\n        return (\r\n          <EducationForm\r\n            typeForm=\"Update\"\r\n            taskType={taskType}\r\n            history={this.props.history}\r\n            profileIdentifier={profile_backlog_id}\r\n            profileSequence={pt_id}\r\n          />\r\n        );\r\n      } else if (taskType === \"lang\") {\r\n        return (\r\n          <LanguageForm\r\n            typeForm=\"Update\"\r\n            taskType={taskType}\r\n            history={this.props.history}\r\n            profileIdentifier={profile_backlog_id}\r\n            profileSequence={pt_id}\r\n          />\r\n        );\r\n      } else if (taskType === \"cliPrj\") {\r\n        return (\r\n          <ClientProjectForm\r\n            typeForm=\"Update\"\r\n            taskType={taskType}\r\n            history={this.props.history}\r\n            profileIdentifier={profile_backlog_id}\r\n            profileSequence={pt_id}\r\n          />\r\n        );\r\n      }\r\n    };\r\n\r\n    return <div>{taskComponent(taskType)}</div>;\r\n  }\r\n}\r\n\r\nUpdateProfileTask.propTypes = {\r\n  getProfileTask: PropTypes.func.isRequired,\r\n  profile_task: PropTypes.object.isRequired,\r\n  updateProfileTask: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  profile_task: state.profileBacklog.profile_task,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getProfileTask, updateProfileTask }\r\n)(UpdateProfileTask);\r\n"]},"metadata":{},"sourceType":"module"}