{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _timm = require('timm');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar REQUIRED_CORE_VERSION = '^3.0.0-rc.2';\n/* eslint-disable no-undef */\n\nvar IS_BROWSER = typeof window !== 'undefined' && window !== null || process.env.TEST_BROWSER != null;\n/* eslint-enable no-undef */\n\nvar DEFAULT_CONFIG = {\n  moduleNameLength: 20,\n  relativeTime: IS_BROWSER,\n  colors: true,\n  useStderr: false\n}; // -----------------------------------------\n// Listener\n// -----------------------------------------\n\nvar ConsoleListener = function () {\n  function ConsoleListener(config, _ref) {\n    var hub = _ref.hub,\n        ansiColors = _ref.ansiColors,\n        recordToLines = _ref.recordToLines;\n\n    _classCallCheck(this, ConsoleListener);\n\n    this.type = 'CONSOLE';\n    this.config = config;\n    this.hub = hub;\n    this.hubId = hub.getHubId();\n    this.ansiColors = ansiColors;\n    this.recordToLines = recordToLines;\n    this.prevTime = 0;\n  }\n\n  _createClass(ConsoleListener, [{\n    key: 'configure',\n    value: function configure(config) {\n      this.config = (0, _timm.merge)(this.config, config);\n    }\n  }, {\n    key: 'getConfig',\n    value: function getConfig() {\n      return this.config;\n    } // No init() or tearDown() is required\n    // -----------------------------------------\n    // Main processing function\n    // -----------------------------------------\n\n  }, {\n    key: 'process',\n    value: function process(msg) {\n      var _this = this;\n\n      if (msg.type !== 'RECORDS') return;\n      if (msg.hubId !== this.hubId) return; // only log local records\n\n      msg.data.forEach(function (record) {\n        return _this.processRecord(record);\n      });\n    }\n  }, {\n    key: 'processRecord',\n    value: function processRecord(record) {\n      var _this2 = this;\n\n      var options = (0, _timm.set)(this.config, 'prevTime', this.prevTime);\n      var lines = this.recordToLines(record, options);\n      this.prevTime = new Date(record.t);\n      lines.forEach(function (_ref2) {\n        var text = _ref2.text,\n            level = _ref2.level,\n            fLongDelay = _ref2.fLongDelay;\n        return _this2.outputLog(text, level, fLongDelay);\n      });\n    } // -----------------------------------------\n    // Helpers\n    // -----------------------------------------\n\n    /* eslint-disable no-console, prefer-spread */\n\n  }, {\n    key: 'outputLog',\n    value: function outputLog(text, level, fLongDelay) {\n      var args = IS_BROWSER ? this.ansiColors.getBrowserConsoleArgs(text) : [text];\n      if (fLongDelay) console.log('          ...');\n\n      if (IS_BROWSER) {\n        switch (level) {\n          case 40:\n            console.warn.apply(console, args);\n            break;\n\n          case 50:\n          case 60:\n            console.error.apply(console, args);\n            break;\n\n          default:\n            console.log.apply(console, args);\n            break;\n        }\n      } else {\n        /* eslint-disable no-lonely-if */\n        if (this.config.useStderr && level >= 50) {\n          console.error.apply(console, args);\n        } else {\n          console.log.apply(console, args);\n        }\n        /* eslint-enable no-lonely-if */\n\n      }\n    }\n    /* eslint-enable no-console */\n\n  }]);\n\n  return ConsoleListener;\n}(); // -----------------------------------------\n// API\n// -----------------------------------------\n\n\nvar create = function create(userConfig, context) {\n  return new ConsoleListener((0, _timm.addDefaults)(userConfig, DEFAULT_CONFIG), context);\n};\n\ncreate.requiredCoreVersion = REQUIRED_CORE_VERSION;\nexports.default = create;","map":null,"metadata":{},"sourceType":"script"}