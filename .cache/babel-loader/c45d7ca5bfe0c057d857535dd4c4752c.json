{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _timm = require('timm');\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _lodash = require('../vendor/lodash');\n\nvar _ansiColors = require('./ansiColors');\n\nvar ansiColors = _interopRequireWildcard(_ansiColors);\n\nvar _constants = require('./constants');\n\nvar _filters = require('./filters');\n\nvar filters = _interopRequireWildcard(_filters);\n\nvar _serialize = require('./serialize');\n\nvar _treeLines = require('./treeLines');\n\nvar _treeLines2 = _interopRequireDefault(_treeLines);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TIME_COL_RELATIVE_LENGTH = 7;\nvar TIME_COL_RELATIVE_EMPTY = (0, _lodash.padStart)('', TIME_COL_RELATIVE_LENGTH);\nvar TIME_COL_ABSOLUTE_LENGTH = new Date().toISOString().length;\nvar TIME_COL_ABSOLUTE_EMPTY = (0, _lodash.padStart)('', TIME_COL_ABSOLUTE_LENGTH);\n\nvar recordToLines = function recordToLines(record, options) {\n  var src = record.src,\n      level = record.level,\n      fStory = record.fStory,\n      obj = record.obj,\n      objLevel = record.objLevel,\n      objOptions = record.objOptions,\n      objExpanded = record.objExpanded;\n  var moduleNameLength = options.moduleNameLength,\n      relativeTime = options.relativeTime,\n      _options$colors = options.colors,\n      colors = _options$colors === undefined ? true : _options$colors;\n  var out = [];\n  var tmp = getTimeStr(record, options);\n  var timeStr = tmp.timeStr;\n  var fLongDelay = tmp.fLongDelay;\n  var levelStr = ansiColors.LEVEL_NUM_TO_COLORED_STR[level];\n  var msgStr = void 0;\n  var actionStr = void 0; // let parents\n\n  if (fStory) {\n    // parents = record.parents;\n    timeStr = _chalk2.default.bold(timeStr);\n    var storyPrefix = void 0;\n\n    switch (record.action) {\n      case 'CREATED':\n        storyPrefix = '\\u250C\\u2500\\u2500';\n        break;\n\n      case 'CLOSED':\n        storyPrefix = '\\u2514\\u2500\\u2500';\n        break;\n\n      default:\n        storyPrefix = '\\u251C\\u2500\\u2500';\n        break;\n    }\n\n    msgStr = _chalk2.default.bold(storyPrefix + ' ' + record.title);\n    actionStr = ' [' + _chalk2.default.bold(record.action) + ']';\n  } else {\n    // parents = [storyId];\n    msgStr = record.msg;\n    actionStr = '';\n  } // const parentsStr = _.padEnd(parents.map(o => o.slice(0,7)).join(', '), 10);\n\n\n  var srcStr = ansiColors.getSrcChalkColor(src)((0, _lodash.padStart)(src, moduleNameLength));\n  var objStr = '';\n  var fHasObj = obj != null;\n  var deserializedObj = fHasObj ? (0, _serialize.deserialize)(obj) : undefined;\n\n  if (fHasObj && !objExpanded) {\n    try {\n      objStr = _chalk2.default.yellow(' -- ' + JSON.stringify(deserializedObj));\n    } catch (err) {\n      /* ignore */\n    }\n  }\n\n  if (level >= _constants.LEVEL_STR_TO_NUM.ERROR) {\n    msgStr = _chalk2.default.red.bold(msgStr);\n  } else if (level >= _constants.LEVEL_STR_TO_NUM.WARN) {\n    msgStr = _chalk2.default.yellow.bold(msgStr);\n  }\n\n  var finalMsg = timeStr + ' ' + srcStr + ' ' + levelStr + msgStr + actionStr + objStr;\n  if (!colors) finalMsg = _chalk2.default.stripColor(finalMsg);\n  out.push({\n    text: finalMsg,\n    level: record.level,\n    fLongDelay: fLongDelay\n  });\n\n  if (fHasObj && objExpanded && filters.passesFilter(src, objLevel)) {\n    var lines = (0, _treeLines2.default)(deserializedObj, (0, _timm.merge)({\n      prefix: '  '\n    }, objOptions));\n    var levelStr2 = ansiColors.LEVEL_NUM_TO_COLORED_STR[objLevel];\n    var emptyTimeStr = relativeTime ? TIME_COL_RELATIVE_EMPTY : TIME_COL_ABSOLUTE_EMPTY;\n    lines.forEach(function (line) {\n      var text = emptyTimeStr + ' ' + srcStr + ' ' + levelStr2 + line;\n      if (!colors) text = _chalk2.default.stripColor(text);\n      out.push({\n        text: text,\n        level: objLevel\n      });\n    });\n  }\n\n  return out;\n};\n\nvar getTimeStr = function getTimeStr(record, options) {\n  var relativeTime = options.relativeTime,\n      prevTime = options.prevTime;\n  var timeStr = '';\n  var fLongDelay = void 0;\n\n  if (relativeTime) {\n    var newTime = new Date(record.t);\n    var dif = prevTime ? (newTime - prevTime) / 1000 : 0;\n    timeStr = dif < 1 ? dif.toFixed(3) : dif.toFixed(1);\n    timeStr = (0, _lodash.padStart)(timeStr, TIME_COL_RELATIVE_LENGTH);\n    fLongDelay = dif > 1;\n    if (dif < 0.010) timeStr = TIME_COL_RELATIVE_EMPTY;\n  } else {\n    timeStr = new Date(record.t).toISOString();\n  }\n\n  return {\n    timeStr: timeStr,\n    fLongDelay: fLongDelay\n  };\n};\n\nexports.default = recordToLines;","map":null,"metadata":{},"sourceType":"script"}