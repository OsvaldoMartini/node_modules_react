{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/brentvatne/coding/react-navigation-stack/src/views/StackView/StackViewCard.tsx\";\nimport * as React from 'react';\nimport { Animated, StyleSheet, Platform } from 'react-native';\nimport { Screen } from 'react-native-screens';\nimport createPointerEventsContainer from './createPointerEventsContainer';\nvar EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants'\n    };\n  } else {\n    return {};\n  }\n}\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          pointerEvents = _this$props.pointerEvents,\n          style = _this$props.style,\n          position = _this$props.position,\n          transparent = _this$props.transparent,\n          _this$props$scene = _this$props.scene,\n          index = _this$props$scene.index,\n          isActive = _this$props$scene.isActive;\n      var active = Platform.select({\n        web: isActive,\n        default: transparent || isActive ? 1 : position.interpolate({\n          inputRange: [index, index + 1 - EPS, index + 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        })\n      });\n      var animatedStyle = this.props.animatedStyle || {};\n\n      var shadowOpacity = animatedStyle.shadowOpacity,\n          overlayOpacity = animatedStyle.overlayOpacity,\n          containerAnimatedStyle = _objectWithoutProperties(animatedStyle, [\"shadowOpacity\", \"overlayOpacity\"]);\n\n      var flattenedStyle = StyleSheet.flatten(style) || {};\n\n      var backgroundColor = flattenedStyle.backgroundColor,\n          screenStyle = _objectWithoutProperties(flattenedStyle, [\"backgroundColor\"]);\n\n      return React.createElement(Screen, {\n        pointerEvents: pointerEvents,\n        onComponentRef: this.props.onComponentRef,\n        style: [containerAnimatedStyle, screenStyle],\n        active: active,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      }, !transparent && shadowOpacity ? React.createElement(Animated.View, {\n        style: [styles.shadow, {\n          shadowOpacity: shadowOpacity\n        }],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        }\n      }) : null, React.createElement(Animated.View, _extends({}, getAccessibilityProps(isActive), {\n        style: [transparent ? styles.transparent : styles.card, backgroundColor && backgroundColor !== 'transparent' ? {\n          backgroundColor: backgroundColor\n        } : null],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }), children), overlayOpacity ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.overlay, {\n          opacity: overlayOpacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        }\n      }) : null);\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  overlay: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: '#000'\n  }),\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: {\n      width: -1,\n      height: 1\n    },\n    shadowRadius: 5,\n    shadowColor: '#000'\n  },\n  transparent: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  }\n});\nexport default createPointerEventsContainer(Card);","map":null,"metadata":{},"sourceType":"module"}