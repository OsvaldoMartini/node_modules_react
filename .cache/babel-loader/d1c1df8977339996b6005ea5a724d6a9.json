{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runUserJsAndGetRaw = exports.runUserJsAndGetString = undefined;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _vm = require('vm');\n\nvar _vm2 = _interopRequireDefault(_vm);\n\nvar _timm = require('timm');\n\nvar _reportUtils = require('./reportUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DEBUG = process.env.DEBUG_DOCX_TEMPLATES;\n/* eslint-disable no-param-reassign */\n\nvar log = DEBUG ? require('./debug').mainStory : null; // Runs a user snippet in a sandbox, and returns the result\n// as a string. If the `processLineBreaks` flag is set,\n// newlines are replaced with a `w:br` tag (protected by\n// the `literalXmlDelimiter` separators)\n// See more details in runUserJsAndGetRaw() below.\n\nvar runUserJsAndGetString = function () {\n  var _ref = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee(data, code, ctx) {\n    var result, str, literalXmlDelimiter;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return runUserJsAndGetRaw(data, code, ctx);\n\n          case 2:\n            result = _context.sent;\n\n            if (!(result == null)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt('return', '');\n\n          case 5:\n            str = String(result);\n\n            if (ctx.options.processLineBreaks) {\n              literalXmlDelimiter = ctx.options.literalXmlDelimiter;\n              str = str.replace(/\\n/g, literalXmlDelimiter + '<w:br/>' + literalXmlDelimiter);\n            }\n\n            return _context.abrupt('return', str);\n\n          case 8:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function runUserJsAndGetString(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}(); // Runs a user snippet in a sandbox, and returns the result.\n// The snippet can return a Promise, which is then awaited.\n// The sandbox is kept for the execution of snippets later on\n// in the template. Sandboxing can also be disabled via\n// ctx.options.noSandbox.\n\n\nvar runUserJsAndGetRaw = function () {\n  var _ref2 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee2(data, code, ctx) {\n    var sandbox, curLoop, context, result, temp, wrapper, script;\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Retrieve the current JS sandbox contents (if any) and add\n            // the code to be run, and a placeholder for the result,\n            // as well as all data defined by the user\n            sandbox = (0, _timm.merge)(ctx.jsSandbox || {}, {\n              __code__: code,\n              __result__: undefined\n            }, data, ctx.options.additionalJsContext); // Add currently defined vars, including loop vars and the index\n            // of the innermost loop\n\n            curLoop = (0, _reportUtils.getCurLoop)(ctx);\n            if (curLoop) sandbox.$idx = curLoop.idx;\n            (0, _keys2.default)(ctx.vars).forEach(function (varName) {\n              sandbox['$' + varName] = ctx.vars[varName];\n            }); // Run the JS snippet and extract the result\n\n            context = void 0;\n            result = void 0;\n\n            if (ctx.options.runJs) {\n              temp = ctx.options.runJs({\n                sandbox: sandbox,\n                ctx: ctx\n              });\n              context = temp.modifiedSandbox;\n              result = temp.result;\n            } else if (ctx.options.noSandbox) {\n              context = sandbox;\n              wrapper = new Function('with(this) { return eval(__code__); }'); // eslint-disable-line no-new-func\n\n              result = wrapper.call(context);\n            } else {\n              script = new _vm2.default.Script('\\n      __result__ = eval(__code__);\\n      ', {});\n              context = new _vm2.default.createContext(sandbox); // eslint-disable-line new-cap\n\n              script.runInContext(context); // $FlowFixMe: this attribute is set in the inside code, not known by Flow\n\n              result = context.__result__;\n            } // Wait for promises to resolve\n\n\n            if (!((typeof result === 'undefined' ? 'undefined' : (0, _typeof3.default)(result)) === 'object' && result && result.then)) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 10;\n            return result;\n\n          case 10:\n            result = _context2.sent;\n\n          case 11:\n            // Save the sandbox for later use\n            ctx.jsSandbox = (0, _timm.omit)(context, ['__code__', '__result__']);\n            DEBUG && log.debug('JS result', {\n              attach: result\n            });\n            return _context2.abrupt('return', result);\n\n          case 14:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, undefined);\n  }));\n\n  return function runUserJsAndGetRaw(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // ==========================================\n// Public API\n// ==========================================\n\n\nexports.runUserJsAndGetString = runUserJsAndGetString;\nexports.runUserJsAndGetRaw = runUserJsAndGetRaw;","map":null,"metadata":{},"sourceType":"script"}