{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBufferedRecords = exports.getBufferedMessages = exports.emitMsg = exports.emitMsgWithFields = exports.removeAllListeners = exports.removeListener = exports.addListener = exports.getListeners = exports.configure = exports.getHubId = exports.init = undefined;\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nvar _timm = require('timm');\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _semver = require('semver');\n\nvar _semver2 = _interopRequireDefault(_semver);\n\nvar _filters = require('./filters');\n\nvar filters = _interopRequireWildcard(_filters);\n\nvar _ansiColors = require('./ansiColors');\n\nvar ansiColors = _interopRequireWildcard(_ansiColors);\n\nvar _recordToLines = require('./recordToLines');\n\nvar _recordToLines2 = _interopRequireDefault(_recordToLines);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar coreVersion = require('../../package.json').version;\n\nvar DEFAULT_CONFIG = {\n  bufMsgSize: 1000,\n  bufSize: 1000\n}; // -------------------------------------\n// Init and config\n// -------------------------------------\n\nvar mainStory = null;\nvar config = DEFAULT_CONFIG;\n\nvar hubId = _uuid2.default.v4();\n\nvar init = function init(deps, options) {\n  mainStory = deps.mainStory;\n  /* istanbul ignore if */\n\n  if (!mainStory) throw new Error('MISSING_DEPENDENCIES');\n  /* istanbul ignore if */\n\n  if (options != null) configure(options);\n};\n\nvar getHubId = function getHubId() {\n  return hubId;\n};\n\nvar configure = function configure(options) {\n  config = (0, _timm.merge)(config, options);\n}; // -------------------------------------\n// Managing listeners\n// -------------------------------------\n\n\nvar listeners = [];\n\nvar getListeners = function getListeners() {\n  return listeners;\n};\n\nvar addListener = function addListener(listenerCreate) {\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var requiredCoreVersion = listenerCreate.requiredCoreVersion;\n\n  if (requiredCoreVersion && !_semver2.default.satisfies(coreVersion, requiredCoreVersion)) {\n    /* eslint-disable no-console */\n    console.error('Incompatible listener (requires storyboard-core ' + requiredCoreVersion + ', current ' + coreVersion + ')');\n    /* eslint-enable no-console */\n\n    return null;\n  }\n\n  var listener = listenerCreate(userConfig, {\n    mainStory: mainStory,\n    filters: filters,\n    ansiColors: ansiColors,\n    recordToLines: _recordToLines2.default,\n    chalk: _chalk2.default,\n    hub: hubApiForListeners\n  });\n  listeners.push(listener);\n  if (listener.init) listener.init();\n  getBufferedMessages().forEach(function (msg) {\n    return listener.process(msg);\n  });\n  return listener;\n};\n\nvar removeListener = function removeListener(listener) {\n  if (listener.tearDown) listener.tearDown();\n  listeners = listeners.filter(function (o) {\n    return o !== listener;\n  });\n};\n\nvar removeAllListeners = function removeAllListeners() {\n  listeners.forEach(removeListener);\n  listeners = [];\n}; // -------------------------------------\n// Message buffer\n// -------------------------------------\n\n\nvar bufMessages = [];\nvar bufRecords = [];\n\nvar addToMsgBuffers = function addToMsgBuffers(msg) {\n  bufMessages.push(msg);\n  var _config = config,\n      bufMsgSize = _config.bufMsgSize;\n  if (bufMessages.length > bufMsgSize) bufMessages = bufMessages.slice(-bufMsgSize);\n\n  if (msg.type === 'RECORDS') {\n    var records = msg.data;\n    var _config2 = config,\n        bufSize = _config2.bufSize;\n    bufRecords = bufRecords.concat(records);\n    if (bufRecords.length > bufSize) bufRecords = bufRecords.slice(-bufSize);\n  }\n};\n\nvar getBufferedMessages = function getBufferedMessages() {\n  return bufMessages;\n};\n\nvar getBufferedRecords = function getBufferedRecords() {\n  return bufRecords;\n}; // -------------------------------------\n// Emitting messages\n// -------------------------------------\n\n\nvar emitMsgWithFields = function emitMsgWithFields(src, type, data, srcListener) {\n  emitMsg({\n    src: src,\n    hubId: hubId,\n    type: type,\n    data: data\n  }, srcListener);\n}; // Add message to buffer and broadcast it (to all but the sender)\n\n\nvar emitMsg = function emitMsg(msg, srcListener) {\n  addToMsgBuffers(msg);\n  listeners.forEach(function (listener) {\n    if (listener === srcListener) return;\n    listener.process(msg);\n  });\n}; // -------------------------------------\n// APIs\n// -------------------------------------\n\n\nvar hubApiForListeners = {\n  getHubId: getHubId,\n  emitMsgWithFields: emitMsgWithFields,\n  emitMsg: emitMsg,\n  getBufferedMessages: getBufferedMessages,\n  getBufferedRecords: getBufferedRecords\n};\nexports.init = init;\nexports.getHubId = getHubId;\nexports.configure = configure;\nexports.getListeners = getListeners;\nexports.addListener = addListener;\nexports.removeListener = removeListener;\nexports.removeAllListeners = removeAllListeners;\nexports.emitMsgWithFields = emitMsgWithFields;\nexports.emitMsg = emitMsg;\nexports.getBufferedMessages = getBufferedMessages;\nexports.getBufferedRecords = getBufferedRecords;","map":null,"metadata":{},"sourceType":"script"}