{"ast":null,"code":"import { SwitchRouter, NavigationActions } from '@react-navigation/core';\nimport DrawerActions from './DrawerActions';\n\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n}\n\nconst getActiveRouteKey = route => {\n  if (route.routes && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nexport default ((routeConfigs, config = {}) => {\n  config = { ...config\n  };\n  config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n  const switchRouter = SwitchRouter(routeConfigs, config);\n\n  let __id = -1;\n\n  const genId = () => {\n    __id++;\n    return __id;\n  };\n\n  return { ...switchRouter,\n\n    getActionCreators(route, navStateKey) {\n      return {\n        openDrawer: () => DrawerActions.openDrawer({\n          key: navStateKey\n        }),\n        closeDrawer: () => DrawerActions.closeDrawer({\n          key: navStateKey\n        }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({\n          key: navStateKey\n        }),\n        ...switchRouter.getActionCreators(route, navStateKey)\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return { ...switchRouter.getStateForAction(action, undefined),\n          isDrawerOpen: false,\n          isDrawerIdle: true,\n          drawerMovementDirection: null,\n          openId: genId(),\n          closeId: genId(),\n          toggleId: genId()\n        };\n      }\n\n      const isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        // Only handle actions that are meant for this drawer, as specified by action.key.\n        if (action.type === DrawerActions.DRAWER_CLOSED) {\n          return { ...state,\n            isDrawerOpen: false,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === DrawerActions.DRAWER_OPENED) {\n          return { ...state,\n            isDrawerOpen: true,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === DrawerActions.CLOSE_DRAWER) {\n          return { ...state,\n            closeId: genId()\n          };\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_SETTLING) {\n          return { ...state,\n            isDrawerIdle: false,\n            drawerMovementDirection: action.willShow ? 'opening' : 'closing'\n          };\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_ACTIVE) {\n          return { ...state,\n            isDrawerIdle: false,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_IDLE) {\n          return { ...state,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === NavigationActions.BACK && (state.isDrawerOpen || !state.isDrawerIdle) && state.drawerMovementDirection !== 'closing') {\n          return { ...state,\n            closeId: genId()\n          };\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return { ...state,\n            openId: genId()\n          };\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return { ...state,\n            toggleId: genId()\n          };\n        }\n      } // Fall back on switch router for screen switching logic, and handling of child routers\n\n\n      const switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\n        return null;\n      } // Has the switch router changed the state?\n\n\n      if (switchedState !== state) {\n        // If any navigation has happened, and the drawer is maybe open, make sure to close it\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && (state.isDrawerOpen || state.drawerMovementDirection !== 'closing')) {\n          return { ...switchedState,\n            closeId: genId()\n          };\n        } // At this point, return the state as defined by the switch router.\n        // The active route key hasn't changed, so this most likely means that a child router has returned\n        // a new state like a param change, but the same key is still active and the drawer will remain open\n\n\n        return switchedState;\n      }\n\n      return state;\n    }\n\n  };\n});","map":null,"metadata":{},"sourceType":"module"}