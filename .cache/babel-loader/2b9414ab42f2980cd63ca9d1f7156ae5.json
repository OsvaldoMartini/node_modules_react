{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logLoop = exports.isLoopExploring = exports.getCurLoop = exports.addChild = exports.newTextNode = exports.newNonTextNode = exports.insertTextSiblingAfter = exports.getNextSibling = exports.cloneNodeForLogging = exports.cloneNodeWithoutChildren = undefined;\n\nvar _timm = require('timm');\n\nvar DEBUG = process.env.DEBUG_DOCX_TEMPLATES;\nvar log = DEBUG ? require('./debug').mainStory : null;\nvar chalk = DEBUG ? require('./debug').chalk : null; // ==========================================\n// Nodes and trees\n// ==========================================\n\nvar cloneNodeWithoutChildren = function cloneNodeWithoutChildren(node) {\n  if (node._fTextNode) {\n    return {\n      _parent: null,\n      _children: [],\n      _fTextNode: true,\n      _text: node._text\n    };\n  }\n\n  return {\n    _parent: null,\n    _children: [],\n    _fTextNode: false,\n    _tag: node._tag,\n    _attrs: node._attrs\n  };\n};\n\nvar cloneNodeForLogging = function cloneNodeForLogging(node) {\n  return (0, _timm.omit)(node, ['_parent', '_children']);\n};\n\nvar getNextSibling = function getNextSibling(node) {\n  var parent = node._parent;\n  if (parent == null) return null;\n  var siblings = parent._children;\n  var idx = siblings.indexOf(node);\n  if (idx < 0 || idx >= siblings.length - 1) return null;\n  return siblings[idx + 1];\n};\n\nvar insertTextSiblingAfter = function insertTextSiblingAfter(textNode) {\n  var tNode = textNode._parent;\n\n  if (!(tNode && !tNode._fTextNode && tNode._tag === 'w:t')) {\n    throw new Error('Template syntax error: text node not within w:t');\n  }\n\n  var tNodeParent = tNode._parent;\n  if (tNodeParent == null) throw new Error('Template syntax error: w:t node has no parent');\n\n  var idx = tNodeParent._children.indexOf(tNode);\n\n  if (idx < 0) throw new Error('Template syntax error');\n  var newTNode = cloneNodeWithoutChildren(tNode);\n  newTNode._parent = tNodeParent;\n  var newTextNode = {\n    _parent: newTNode,\n    _children: [],\n    _fTextNode: true,\n    _text: ''\n  };\n  newTNode._children = [newTextNode];\n\n  tNodeParent._children.splice(idx + 1, 0, newTNode);\n\n  return newTextNode;\n};\n\nvar newNonTextNode = function newNonTextNode(tag) {\n  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var node = {\n    _parent: null,\n    _fTextNode: false,\n    _tag: tag,\n    _attrs: attrs,\n    _children: children\n  };\n\n  node._children.forEach(function (child) {\n    child._parent = node; // eslint-disable-line\n  });\n\n  return node;\n};\n\nvar newTextNode = function newTextNode(text) {\n  var node = {\n    _parent: null,\n    _children: [],\n    _fTextNode: true,\n    _text: text\n  };\n  return node;\n};\n\nvar addChild = function addChild(parent, child) {\n  parent._children.push(child);\n\n  child._parent = parent; // eslint-disable-line\n\n  return child;\n}; // ==========================================\n// Loops\n// ==========================================\n\n\nvar getCurLoop = function getCurLoop(ctx) {\n  if (!ctx.loops.length) return null;\n  return ctx.loops[ctx.loops.length - 1];\n};\n\nvar isLoopExploring = function isLoopExploring(ctx) {\n  var curLoop = getCurLoop(ctx);\n  return curLoop != null && curLoop.idx < 0;\n};\n\nvar logLoop = function logLoop(loops) {\n  if (!DEBUG) return;\n  if (!loops.length) return;\n  var level = loops.length - 1;\n  var _loops$level = loops[level],\n      varName = _loops$level.varName,\n      idx = _loops$level.idx,\n      loopOver = _loops$level.loopOver,\n      isIf = _loops$level.isIf;\n  var idxStr = idx >= 0 ? idx + 1 : 'EXPLORATION';\n  log.debug((isIf ? 'IF' : 'FOR') + ' loop ' + ('on ' + chalk.magenta.bold(level + ':' + varName) + ': ') + (chalk.magenta.bold(idxStr) + '/' + loopOver.length));\n}; // ==========================================\n// Public API\n// ==========================================\n\n\nexports.cloneNodeWithoutChildren = cloneNodeWithoutChildren;\nexports.cloneNodeForLogging = cloneNodeForLogging;\nexports.getNextSibling = getNextSibling;\nexports.insertTextSiblingAfter = insertTextSiblingAfter;\nexports.newNonTextNode = newNonTextNode;\nexports.newTextNode = newTextNode;\nexports.addChild = addChild;\nexports.getCurLoop = getCurLoop;\nexports.isLoopExploring = isLoopExploring;\nexports.logLoop = logLoop;","map":null,"metadata":{},"sourceType":"script"}