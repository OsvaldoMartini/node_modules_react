{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _timm = require('timm');\n\nvar _zip = require('./zip');\n\nvar _xml = require('./xml');\n\nvar _preprocessTemplate = require('./preprocessTemplate');\n\nvar _preprocessTemplate2 = _interopRequireDefault(_preprocessTemplate);\n\nvar _processTemplate = require('./processTemplate');\n\nvar _reportUtils = require('./reportUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-disable no-param-reassign, no-console */\n\n\nvar DEBUG = process.env.DEBUG_DOCX_TEMPLATES;\nvar DEFAULT_CMD_DELIMITER = '+++';\nvar DEFAULT_LITERAL_XML_DELIMITER = '||';\nvar log = DEBUG ? require('./debug').mainStory : null;\nvar chalk = DEBUG ? require('./debug').chalk : null; // ==========================================\n// Main\n// ==========================================\n\nvar createReport = function () {\n  var _ref = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee2(options) {\n    var template, data, queryVars, _probe, templatePath, literalXmlDelimiter, createOptions, xmlOptions, zip, templateXml, tic, parseResult, jsTemplate, tac, finalTemplate, queryResult, query, result, report1, images1, links1, htmls1, reportXml, numImages, numHtmls, files, images, links, htmls, i, filePath, raw, js0, js, _ref3, report2, images2, links2, htmls2, xml, segments, documentComponent, contentTypesPath, contentTypesXml, contentTypes, ensureContentType, finalContentTypesXml, output;\n\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            DEBUG && log.debug('Report options:', {\n              attach: options\n            });\n            template = options.template, data = options.data, queryVars = options.queryVars, _probe = options._probe;\n            templatePath = 'word';\n            literalXmlDelimiter = options.literalXmlDelimiter || DEFAULT_LITERAL_XML_DELIMITER;\n            createOptions = {\n              cmdDelimiter: options.cmdDelimiter || DEFAULT_CMD_DELIMITER,\n              literalXmlDelimiter: literalXmlDelimiter,\n              processLineBreaks: options.processLineBreaks != null ? options.processLineBreaks : true,\n              noSandbox: options.noSandbox || false,\n              runJs: options.runJs,\n              additionalJsContext: options.additionalJsContext || {}\n            };\n            xmlOptions = {\n              literalXmlDelimiter: literalXmlDelimiter\n            }; // ---------------------------------------------------------\n            // Unzip\n            // ---------------------------------------------------------\n\n            DEBUG && log.debug('Unzipping...');\n            (0, _zip.zipInit)();\n            _context2.next = 10;\n            return (0, _zip.zipLoad)(template);\n\n          case 10:\n            zip = _context2.sent; // ---------------------------------------------------------\n            // Read the 'document.xml' file (the template) and parse it\n            // ---------------------------------------------------------\n\n            DEBUG && log.debug('Reading template...');\n            _context2.next = 14;\n            return (0, _zip.zipGetText)(zip, templatePath + '/document.xml');\n\n          case 14:\n            templateXml = _context2.sent;\n            DEBUG && log.debug('Template file length: ' + templateXml.length);\n            DEBUG && log.debug('Parsing XML...');\n            tic = new Date().getTime();\n            _context2.next = 20;\n            return (0, _xml.parseXml)(templateXml);\n\n          case 20:\n            parseResult = _context2.sent;\n            jsTemplate = parseResult;\n            tac = new Date().getTime();\n            DEBUG && log.debug('File parsed in ' + (tac - tic) + ' ms', {\n              attach: jsTemplate,\n              attachLevel: 'trace'\n            }); // ---------------------------------------------------------\n            // Preprocess template\n            // ---------------------------------------------------------\n\n            DEBUG && log.debug('Preprocessing template...'); // DEBUG && log.debug('Preprocessing template...', {\n            //   attach: jsTemplate,\n            //   attachLevel: 'debug',\n            //   ignoreKeys: ['_parent', '_fTextNode', '_attrs'],\n            // });\n\n            finalTemplate = (0, _preprocessTemplate2.default)(jsTemplate, createOptions); // ---------------------------------------------------------\n            // Fetch the data that will fill in the template\n            // ---------------------------------------------------------\n\n            queryResult = null;\n\n            if (!(typeof data === 'function')) {\n              _context2.next = 38;\n              break;\n            }\n\n            DEBUG && log.debug('Looking for the query in the template...');\n            _context2.next = 31;\n            return (0, _processTemplate.extractQuery)(finalTemplate, createOptions);\n\n          case 31:\n            query = _context2.sent;\n            DEBUG && log.debug('Query: ' + (query || 'no query found'));\n            _context2.next = 35;\n            return data(query, queryVars);\n\n          case 35:\n            queryResult = _context2.sent;\n            _context2.next = 39;\n            break;\n\n          case 38:\n            queryResult = data;\n\n          case 39:\n            // ---------------------------------------------------------\n            // Process document.xml:\n            // - Generate the report\n            // - Build output XML and write it to disk\n            // - Images\n            // ---------------------------------------------------------\n            DEBUG && log.debug('Generating report...'); // DEBUG &&\n            //   log.debug('Generating report...', {\n            //     attach: finalTemplate,\n            //     attachLevel: 'debug',\n            //     ignoreKeys: ['_parent', '_fTextNode', '_attrs'],\n            //   });\n\n            _context2.next = 42;\n            return (0, _processTemplate.produceJsReport)(queryResult, finalTemplate, createOptions);\n\n          case 42:\n            result = _context2.sent;\n            report1 = result.report, images1 = result.images, links1 = result.links, htmls1 = result.htmls;\n\n            if (!(_probe === 'JS')) {\n              _context2.next = 46;\n              break;\n            }\n\n            return _context2.abrupt('return', report1);\n\n          case 46:\n            // DEBUG &&\n            //   log.debug('Report', {\n            //     attach: report,\n            //     attachLevel: 'debug',\n            //     ignoreKeys: ['_parent', '_fTextNode', '_attrs'],\n            //   });\n            DEBUG && log.debug('Converting report to XML...');\n            reportXml = (0, _xml.buildXml)(report1, xmlOptions);\n\n            if (!(_probe === 'XML')) {\n              _context2.next = 50;\n              break;\n            }\n\n            return _context2.abrupt('return', reportXml);\n\n          case 50:\n            DEBUG && log.debug('Writing report...');\n            (0, _zip.zipSetText)(zip, templatePath + '/document.xml', reportXml);\n            numImages = (0, _keys2.default)(images1).length;\n            numHtmls = (0, _keys2.default)(htmls1).length;\n            _context2.next = 56;\n            return processImages(images1, 'document.xml', zip, templatePath);\n\n          case 56:\n            _context2.next = 58;\n            return processLinks(links1, 'document.xml', zip, templatePath);\n\n          case 58:\n            _context2.next = 60;\n            return processHtmls(htmls1, 'document.xml', zip, templatePath, xmlOptions);\n\n          case 60:\n            // ---------------------------------------------------------\n            // Process all other XML files (they may contain headers, etc.)\n            // ---------------------------------------------------------\n            files = [];\n            zip.forEach(function () {\n              var _ref2 = (0, _asyncToGenerator3.default)(\n              /*#__PURE__*/\n              _regenerator2.default.mark(function _callee(filePath) {\n                var regex;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        regex = new RegExp(templatePath + '\\\\/[^\\\\/]+\\\\.xml');\n\n                        if (regex.test(filePath) && filePath !== templatePath + '/document.xml' && filePath.indexOf(templatePath + '/template') !== 0) {\n                          files.push(filePath);\n                        }\n\n                      case 2:\n                      case 'end':\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, undefined);\n              }));\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n            images = images1;\n            links = links1;\n            htmls = htmls1;\n            i = 0;\n\n          case 66:\n            if (!(i < files.length)) {\n              _context2.next = 101;\n              break;\n            }\n\n            filePath = files[i];\n            DEBUG && log.info('Processing ' + chalk.bold(filePath) + '...');\n            _context2.next = 71;\n            return (0, _zip.zipGetText)(zip, filePath);\n\n          case 71:\n            raw = _context2.sent;\n            _context2.next = 74;\n            return (0, _xml.parseXml)(raw);\n\n          case 74:\n            js0 = _context2.sent;\n            js = (0, _preprocessTemplate2.default)(js0, createOptions);\n            _context2.next = 78;\n            return (0, _processTemplate.produceJsReport)(queryResult, js, createOptions);\n\n          case 78:\n            _ref3 = _context2.sent;\n            report2 = _ref3.report;\n            images2 = _ref3.images;\n            links2 = _ref3.links;\n            htmls2 = _ref3.htmls;\n            images = (0, _timm.merge)(images, images2);\n            links = (0, _timm.merge)(links, links2);\n            htmls = (0, _timm.merge)(htmls, htmls2);\n            xml = (0, _xml.buildXml)(report2, xmlOptions);\n            (0, _zip.zipSetText)(zip, filePath, xml);\n            numImages += (0, _keys2.default)(images2).length;\n            numHtmls += (0, _keys2.default)(htmls2).length;\n            segments = filePath.split('/');\n            documentComponent = segments[segments.length - 1];\n            _context2.next = 94;\n            return processImages(images2, documentComponent, zip, templatePath);\n\n          case 94:\n            _context2.next = 96;\n            return processLinks(links2, 'document.xml', zip, templatePath);\n\n          case 96:\n            _context2.next = 98;\n            return processHtmls(htmls2, 'document.xml', zip, templatePath, xmlOptions);\n\n          case 98:\n            i++;\n            _context2.next = 66;\n            break;\n\n          case 101:\n            if (!(numImages || numHtmls)) {\n              _context2.next = 115;\n              break;\n            }\n\n            DEBUG && log.debug('Completing [Content_Types].xml...');\n            contentTypesPath = '[Content_Types].xml';\n            _context2.next = 106;\n            return (0, _zip.zipGetText)(zip, contentTypesPath);\n\n          case 106:\n            contentTypesXml = _context2.sent;\n            _context2.next = 109;\n            return (0, _xml.parseXml)(contentTypesXml);\n\n          case 109:\n            contentTypes = _context2.sent; // DEBUG && log.debug('Content types', { attach: contentTypes });\n\n            ensureContentType = function ensureContentType(extension, contentType) {\n              var children = contentTypes._children;\n\n              if (children.filter(function (o) {\n                return !o._fTextNode && o._attrs.Extension === extension;\n              }).length) {\n                return;\n              }\n\n              (0, _reportUtils.addChild)(contentTypes, (0, _reportUtils.newNonTextNode)('Default', {\n                Extension: extension,\n                ContentType: contentType\n              }));\n            };\n\n            if (numImages) {\n              DEBUG && log.debug('Completing [Content_Types].xml for IMAGES...');\n              ensureContentType('png', 'image/png');\n              ensureContentType('jpg', 'image/jpeg');\n              ensureContentType('jpeg', 'image/jpeg');\n              ensureContentType('gif', 'image/gif');\n              ensureContentType('bmp', 'image/bmp');\n              ensureContentType('svg', 'image/svg+xml');\n            }\n\n            if (numHtmls) {\n              DEBUG && log.debug('Completing [Content_Types].xml for HTML...');\n              ensureContentType('html', 'text/html');\n            }\n\n            finalContentTypesXml = (0, _xml.buildXml)(contentTypes, xmlOptions);\n            (0, _zip.zipSetText)(zip, contentTypesPath, finalContentTypesXml);\n\n          case 115:\n            // ---------------------------------------------------------\n            // Zip the results\n            // ---------------------------------------------------------\n            DEBUG && log.debug('Zipping...');\n            _context2.next = 118;\n            return (0, _zip.zipSave)(zip);\n\n          case 118:\n            output = _context2.sent;\n            return _context2.abrupt('return', output);\n\n          case 120:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, undefined);\n  }));\n\n  return function createReport(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // ==========================================\n// Process images\n// ==========================================\n\n\nvar processImages = function () {\n  var _ref4 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee3(images, documentComponent, zip, templatePath) {\n    var imageIds, relsPath, rels, i, imageId, _images$imageId, extension, imgData, imgName, imgPath, finalRelsXml;\n\n    return _regenerator2.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            DEBUG && log.debug('Processing images for ' + documentComponent + '...');\n            imageIds = (0, _keys2.default)(images);\n\n            if (!imageIds.length) {\n              _context3.next = 28;\n              break;\n            }\n\n            DEBUG && log.debug('Completing document.xml.rels...');\n            relsPath = templatePath + '/_rels/' + documentComponent + '.rels';\n            _context3.next = 7;\n            return getRelsFromZip(zip, relsPath);\n\n          case 7:\n            rels = _context3.sent;\n            i = 0;\n\n          case 9:\n            if (!(i < imageIds.length)) {\n              _context3.next = 26;\n              break;\n            }\n\n            imageId = imageIds[i];\n            _images$imageId = images[imageId], extension = _images$imageId.extension, imgData = _images$imageId.data;\n            imgName = 'template_' + documentComponent + '_image' + (i + 1) + extension;\n            DEBUG && log.debug('Writing image ' + imageId + ' (' + imgName + ')...');\n            imgPath = templatePath + '/media/' + imgName;\n\n            if (!(typeof imgData === 'string')) {\n              _context3.next = 20;\n              break;\n            }\n\n            _context3.next = 18;\n            return (0, _zip.zipSetBase64)(zip, imgPath, imgData);\n\n          case 18:\n            _context3.next = 22;\n            break;\n\n          case 20:\n            _context3.next = 22;\n            return (0, _zip.zipSetBinary)(zip, imgPath, imgData);\n\n          case 22:\n            (0, _reportUtils.addChild)(rels, (0, _reportUtils.newNonTextNode)('Relationship', {\n              Id: imageId,\n              Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n              Target: 'media/' + imgName\n            }));\n\n          case 23:\n            i++;\n            _context3.next = 9;\n            break;\n\n          case 26:\n            finalRelsXml = (0, _xml.buildXml)(rels, {\n              literalXmlDelimiter: DEFAULT_LITERAL_XML_DELIMITER\n            });\n            (0, _zip.zipSetText)(zip, relsPath, finalRelsXml);\n\n          case 28:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, undefined);\n  }));\n\n  return function processImages(_x3, _x4, _x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}(); // ==========================================\n// Process links\n// ==========================================\n\n\nvar processLinks = function () {\n  var _ref5 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee4(links, documentComponent, zip, templatePath) {\n    var linkIds, relsPath, rels, i, linkId, url, finalRelsXml;\n    return _regenerator2.default.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            DEBUG && log.debug('Processing links for ' + documentComponent + '...');\n            linkIds = (0, _keys2.default)(links);\n\n            if (!linkIds.length) {\n              _context4.next = 11;\n              break;\n            }\n\n            DEBUG && log.debug('Completing document.xml.rels...');\n            relsPath = templatePath + '/_rels/' + documentComponent + '.rels';\n            _context4.next = 7;\n            return getRelsFromZip(zip, relsPath);\n\n          case 7:\n            rels = _context4.sent;\n\n            for (i = 0; i < linkIds.length; i++) {\n              linkId = linkIds[i];\n              url = links[linkId].url;\n              (0, _reportUtils.addChild)(rels, (0, _reportUtils.newNonTextNode)('Relationship', {\n                Id: linkId,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink',\n                Target: url,\n                TargetMode: 'External'\n              }));\n            }\n\n            finalRelsXml = (0, _xml.buildXml)(rels, {\n              literalXmlDelimiter: DEFAULT_LITERAL_XML_DELIMITER\n            });\n            (0, _zip.zipSetText)(zip, relsPath, finalRelsXml);\n\n          case 11:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, _callee4, undefined);\n  }));\n\n  return function processLinks(_x7, _x8, _x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar processHtmls = function () {\n  var _ref6 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee5(htmls, documentComponent, zip, templatePath) {\n    var htmlIds, htmlFiles, relsPath, rels, i, htmlId, htmlData, htmlName, htmlPath, finalRelsXml;\n    return _regenerator2.default.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            DEBUG && log.debug('Processing htmls for ' + documentComponent + '...');\n            htmlIds = (0, _keys2.default)(htmls);\n\n            if (!htmlIds.length) {\n              _context5.next = 12;\n              break;\n            } // Process rels\n\n\n            DEBUG && log.debug('Completing document.xml.rels...');\n            htmlFiles = [];\n            relsPath = templatePath + '/_rels/' + documentComponent + '.rels';\n            _context5.next = 8;\n            return getRelsFromZip(zip, relsPath);\n\n          case 8:\n            rels = _context5.sent;\n\n            for (i = 0; i < htmlIds.length; i++) {\n              htmlId = htmlIds[i];\n              htmlData = htmls[htmlId];\n              htmlName = 'template_' + documentComponent + '_' + htmlId + '.html';\n              DEBUG && log.debug('Writing html ' + htmlId + ' (' + htmlName + ')...');\n              htmlPath = templatePath + '/' + htmlName;\n              htmlFiles.push('/' + htmlPath);\n              (0, _zip.zipSetText)(zip, htmlPath, htmlData);\n              (0, _reportUtils.addChild)(rels, (0, _reportUtils.newNonTextNode)('Relationship', {\n                Id: htmlId,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/aFChunk',\n                Target: '' + htmlName\n              }));\n            }\n\n            finalRelsXml = (0, _xml.buildXml)(rels, {\n              literalXmlDelimiter: DEFAULT_LITERAL_XML_DELIMITER\n            });\n            (0, _zip.zipSetText)(zip, relsPath, finalRelsXml);\n\n          case 12:\n          case 'end':\n            return _context5.stop();\n        }\n      }\n    }, _callee5, undefined);\n  }));\n\n  return function processHtmls(_x11, _x12, _x13, _x14) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar getRelsFromZip = function () {\n  var _ref7 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee6(zip, relsPath) {\n    var relsXml;\n    return _regenerator2.default.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return (0, _zip.zipGetText)(zip, relsPath);\n\n          case 2:\n            relsXml = _context6.sent;\n\n            if (!relsXml) {\n              relsXml = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n        <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\\n        </Relationships>';\n            }\n\n            return _context6.abrupt('return', (0, _xml.parseXml)(relsXml));\n\n          case 5:\n          case 'end':\n            return _context6.stop();\n        }\n      }\n    }, _callee6, undefined);\n  }));\n\n  return function getRelsFromZip(_x15, _x16) {\n    return _ref7.apply(this, arguments);\n  };\n}(); // ==========================================\n// Public API\n// ==========================================\n\n\nexports.default = createReport;","map":null,"metadata":{},"sourceType":"script"}