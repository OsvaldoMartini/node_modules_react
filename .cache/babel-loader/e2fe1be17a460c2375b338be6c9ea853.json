{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projetos\\\\PPMTool-React-Client\\\\src\\\\components\\\\controlls\\\\DownshiftOne.js\";\nimport React from \"react\";\nimport Downshift from \"downshift\";\nconst books = [{\n  name: \"Harry Potter\"\n}, {\n  name: \"Net Moves\"\n}, {\n  name: \"Half of a yellow sun\"\n}, {\n  name: \"The Da Vinci Code\"\n}, {\n  name: \"Born a crime\"\n}];\n\nconst onChange = selectedBook => {\n  alert(\"your favourite book is \".concat(selectedBook.name));\n};\n\nexport default (() => {\n  return React.createElement(Downshift, {\n    onChange: onChange,\n    itemToString: books => books ? books.name : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"// pass the downshift props into a callback\", ({\n    getInputProps,\n    getItemProps,\n    isOpen,\n    inputValue,\n    highlightedIndex,\n    selectedItem,\n    getLabelProps\n  }) => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"// add a label tag and pass our label text to the getLabelProps function\", React.createElement(\"label\", Object.assign({\n    style: {\n      marginTop: \"1rem\",\n      display: \"block\"\n    }\n  }, getLabelProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), \"Choose your favourite book\"), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), \"// add our input element and pass our placeholder to the getInputProps function\", React.createElement(\"input\", Object.assign({}, getInputProps({\n    placeholder: \"Search books\"\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })), \"// if the input element is open, render the div else render nothing\", isOpen ? React.createElement(\"div\", {\n    className: \"downshift-dropdown\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, // filter the books and return items that match the inputValue\n  books.filter(item => !inputValue || item.name.toLowerCase().includes(inputValue.toLowerCase())) // map the return value and return a div\n  .map((item, index) => React.createElement(\"div\", Object.assign({\n    className: \"dropdown-item\"\n  }, getItemProps({\n    key: item.name,\n    index,\n    item\n  }), {\n    style: {\n      backgroundColor: highlightedIndex === index ? \"lightgray\" : \"white\",\n      fontWeight: selectedItem === item ? \"bold\" : \"normal\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), item.name))) : null));\n});","map":{"version":3,"sources":["D:\\Projetos\\PPMTool-React-Client\\src\\components\\controlls\\DownshiftOne.js"],"names":["React","Downshift","books","name","onChange","selectedBook","alert","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","selectedItem","getLabelProps","marginTop","display","placeholder","filter","item","toLowerCase","includes","map","index","key","backgroundColor","fontWeight"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,MAAMC,KAAK,GAAG,CACZ;AAAEC,EAAAA,IAAI,EAAE;AAAR,CADY,EAEZ;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAFY,EAGZ;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAHY,EAIZ;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAJY,EAKZ;AAAEA,EAAAA,IAAI,EAAE;AAAR,CALY,CAAd;;AAQA,MAAMC,QAAQ,GAAGC,YAAY,IAAI;AAC/BC,EAAAA,KAAK,kCAA2BD,YAAY,CAACF,IAAxC,EAAL;AACD,CAFD;;AAIA,gBAAe,MAAM;AACnB,SACE,oBAAC,SAAD;AACE,IAAA,QAAQ,EAAEC,QADZ;AAEE,IAAA,YAAY,EAAEF,KAAK,IAAKA,KAAK,GAAGA,KAAK,CAACC,IAAT,GAAgB,EAF/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAKG,CAAC;AACAI,IAAAA,aADA;AAEAC,IAAAA,YAFA;AAGAC,IAAAA,MAHA;AAIAC,IAAAA,UAJA;AAKAC,IAAAA,gBALA;AAMAC,IAAAA,YANA;AAOAC,IAAAA;AAPA,GAAD,KASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAGE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE,MAAb;AAAqBC,MAAAA,OAAO,EAAE;AAA9B;AADT,KAEMF,aAAa,EAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAHF,EAQW,GARX,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,qFAYE,+CAAWN,aAAa,CAAC;AAAES,IAAAA,WAAW,EAAE;AAAf,GAAD,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAZF,yEAcGP,MAAM,GACL;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AACDP,EAAAA,KAAK,CACFe,MADH,CAEIC,IAAI,IACF,CAACR,UAAD,IACAQ,IAAI,CAACf,IAAL,CAAUgB,WAAV,GAAwBC,QAAxB,CAAiCV,UAAU,CAACS,WAAX,EAAjC,CAJN,EAME;AANF,GAOGE,GAPH,CAOO,CAACH,IAAD,EAAOI,KAAP,KACH;AACE,IAAA,SAAS,EAAC;AADZ,KAEMd,YAAY,CAAC;AAAEe,IAAAA,GAAG,EAAEL,IAAI,CAACf,IAAZ;AAAkBmB,IAAAA,KAAlB;AAAyBJ,IAAAA;AAAzB,GAAD,CAFlB;AAGE,IAAA,KAAK,EAAE;AACLM,MAAAA,eAAe,EACbb,gBAAgB,KAAKW,KAArB,GAA6B,WAA7B,GAA2C,OAFxC;AAGLG,MAAAA,UAAU,EAAEb,YAAY,KAAKM,IAAjB,GAAwB,MAAxB,GAAiC;AAHxC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASGA,IAAI,CAACf,IATR,CARJ,CAFF,CADK,GAwBH,IAtCN,CAdJ,CADF;AA0DD,CA3DD","sourcesContent":["import React from \"react\";\r\nimport Downshift from \"downshift\";\r\n\r\nconst books = [\r\n  { name: \"Harry Potter\" },\r\n  { name: \"Net Moves\" },\r\n  { name: \"Half of a yellow sun\" },\r\n  { name: \"The Da Vinci Code\" },\r\n  { name: \"Born a crime\" }\r\n];\r\n\r\nconst onChange = selectedBook => {\r\n  alert(`your favourite book is ${selectedBook.name}`);\r\n};\r\n\r\nexport default () => {\r\n  return (\r\n    <Downshift\r\n      onChange={onChange}\r\n      itemToString={books => (books ? books.name : \"\")}\r\n    >\r\n      // pass the downshift props into a callback\r\n      {({\r\n        getInputProps,\r\n        getItemProps,\r\n        isOpen,\r\n        inputValue,\r\n        highlightedIndex,\r\n        selectedItem,\r\n        getLabelProps\r\n      }) => (\r\n        <div>\r\n          // add a label tag and pass our label text to the getLabelProps\r\n          function\r\n          <label\r\n            style={{ marginTop: \"1rem\", display: \"block\" }}\r\n            {...getLabelProps()}\r\n          >\r\n            Choose your favourite book\r\n          </label>{\" \"}\r\n          <br />\r\n          // add our input element and pass our placeholder to the getInputProps\r\n          function\r\n          <input {...getInputProps({ placeholder: \"Search books\" })} />\r\n          // if the input element is open, render the div else render nothing\r\n          {isOpen ? (\r\n            <div className=\"downshift-dropdown\">\r\n              {// filter the books and return items that match the inputValue\r\n              books\r\n                .filter(\r\n                  item =>\r\n                    !inputValue ||\r\n                    item.name.toLowerCase().includes(inputValue.toLowerCase())\r\n                )\r\n                // map the return value and return a div\r\n                .map((item, index) => (\r\n                  <div\r\n                    className=\"dropdown-item\"\r\n                    {...getItemProps({ key: item.name, index, item })}\r\n                    style={{\r\n                      backgroundColor:\r\n                        highlightedIndex === index ? \"lightgray\" : \"white\",\r\n                      fontWeight: selectedItem === item ? \"bold\" : \"normal\"\r\n                    }}\r\n                  >\r\n                    {item.name}\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </Downshift>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}