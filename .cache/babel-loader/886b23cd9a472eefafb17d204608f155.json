{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst copyFileSync = require('./copy-file-sync');\n\nconst mkdir = require('../mkdirs');\n\nfunction copySync(src, dest, options) {\n  if (typeof options === 'function' || options instanceof RegExp) {\n    options = {\n      filter: options\n    };\n  }\n\n  options = options || {};\n  options.recursive = !!options.recursive; // default to true for now\n\n  options.clobber = 'clobber' in options ? !!options.clobber : true; // overwrite falls back to clobber\n\n  options.overwrite = 'overwrite' in options ? !!options.overwrite : options.clobber;\n  options.dereference = 'dereference' in options ? !!options.dereference : false;\n  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false;\n\n  options.filter = options.filter || function () {\n    return true;\n  }; // Warn about using preserveTimestamps on 32-bit node:\n\n\n  if (options.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(\"fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n    see https://github.com/jprichardson/node-fs-extra/issues/269\");\n  }\n\n  const stats = options.recursive && !options.dereference ? fs.lstatSync(src) : fs.statSync(src);\n  const destFolder = path.dirname(dest);\n  const destFolderExists = fs.existsSync(destFolder);\n  let performCopy = false;\n\n  if (options.filter instanceof RegExp) {\n    console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function');\n    performCopy = options.filter.test(src);\n  } else if (typeof options.filter === 'function') performCopy = options.filter(src, dest);\n\n  if (stats.isFile() && performCopy) {\n    if (!destFolderExists) mkdir.mkdirsSync(destFolder);\n    copyFileSync(src, dest, {\n      overwrite: options.overwrite,\n      errorOnExist: options.errorOnExist,\n      preserveTimestamps: options.preserveTimestamps\n    });\n  } else if (stats.isDirectory() && performCopy) {\n    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest);\n    const contents = fs.readdirSync(src);\n    contents.forEach(content => {\n      const opts = options;\n      opts.recursive = true;\n      copySync(path.join(src, content), path.join(dest, content), opts);\n    });\n  } else if (options.recursive && stats.isSymbolicLink() && performCopy) {\n    const srcPath = fs.readlinkSync(src);\n    fs.symlinkSync(srcPath, dest);\n  }\n}\n\nmodule.exports = copySync;","map":null,"metadata":{},"sourceType":"script"}