{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projetos\\\\PPMTool-React-Client\\\\src\\\\components\\\\controlls\\\\DownshiftTwo.js\";\nimport React, { Component } from \"react\";\nimport Downshift from \"downshift\";\nimport axios from \"axios\";\nexport default class DownshiftTwo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: []\n    };\n    this.fetchMovies = this.fetchMovies.bind(this);\n    this.inputOnChange = this.inputOnChange.bind(this);\n  } // onChange method for the input field\n\n\n  inputOnChange(event) {\n    if (!event.target.value) {\n      return;\n    }\n\n    this.fetchMovies(event.target.value);\n  } // input field for the <Downshift /> component\n\n\n  downshiftOnChange(selectedMovie) {\n    alert(\"your favourite movie is \".concat(selectedMovie.title));\n  } // method to fetch the movies from the movies API\n\n\n  fetchMovies(movie) {\n    const moviesURL = \"https://api.themoviedb.org/3/search/movie?api_key=1b5adf76a72a13bad99b8fc0c68cb085&query=\".concat(movie);\n    axios.get(moviesURL).then(response => {\n      this.setState({\n        movies: response.data.results\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(Downshift, {\n      onChange: this.downshiftOnChange,\n      itemToString: item => item ? item.title : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"// pass the downshift props into a callback\", ({\n      selectedItem,\n      getInputProps,\n      getItemProps,\n      highlightedIndex,\n      isOpen,\n      inputValue,\n      getLabelProps\n    }) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"// add a label tag and pass our label text to the getLabelProps function\", React.createElement(\"label\", Object.assign({\n      style: {\n        marginTop: \"1rem\",\n        display: \"block\"\n      }\n    }, getLabelProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), \"Choose your favourite movie\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), \"// add a input tag and pass our placeholder text to the getInputProps function. We also have an onChange eventlistener on the input field\", React.createElement(\"input\", Object.assign({}, getInputProps({\n      placeholder: \"Search movies\",\n      onChange: this.inputOnChange\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), \"// if the input element is open, render the div else render nothing\", isOpen ? React.createElement(\"div\", {\n      className: \"downshift-dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, // filter the movies in the state\n    this.state.movies.filter(item => !inputValue || item.title.toLowerCase().includes(inputValue.toLowerCase())).slice(0, 10) // return just the first ten. Helps improve performance\n    // map the filtered movies and display their title\n    .map((item, index) => React.createElement(\"div\", Object.assign({\n      className: \"dropdown-item\"\n    }, getItemProps({\n      key: index,\n      index,\n      item\n    }), {\n      style: {\n        backgroundColor: highlightedIndex === index ? \"lightgray\" : \"white\",\n        fontWeight: selectedItem === item ? \"bold\" : \"normal\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), item.title))) : null));\n  }\n\n}","map":{"version":3,"sources":["D:\\Projetos\\PPMTool-React-Client\\src\\components\\controlls\\DownshiftTwo.js"],"names":["React","Component","Downshift","axios","DownshiftTwo","constructor","props","state","movies","fetchMovies","bind","inputOnChange","event","target","value","downshiftOnChange","selectedMovie","alert","title","movie","moviesURL","get","then","response","setState","data","results","render","item","selectedItem","getInputProps","getItemProps","highlightedIndex","isOpen","inputValue","getLabelProps","marginTop","display","placeholder","onChange","filter","toLowerCase","includes","slice","map","index","key","backgroundColor","fontWeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAClDI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAGA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACD,GARiD,CASlD;;;AACAC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,QAAI,CAACA,KAAK,CAACC,MAAN,CAAaC,KAAlB,EAAyB;AACvB;AACD;;AACD,SAAKL,WAAL,CAAiBG,KAAK,CAACC,MAAN,CAAaC,KAA9B;AACD,GAfiD,CAgBlD;;;AACAC,EAAAA,iBAAiB,CAACC,aAAD,EAAgB;AAC/BC,IAAAA,KAAK,mCAA4BD,aAAa,CAACE,KAA1C,EAAL;AACD,GAnBiD,CAoBlD;;;AACAT,EAAAA,WAAW,CAACU,KAAD,EAAQ;AACjB,UAAMC,SAAS,sGAA+FD,KAA/F,CAAf;AACAhB,IAAAA,KAAK,CAACkB,GAAN,CAAUD,SAAV,EAAqBE,IAArB,CAA0BC,QAAQ,IAAI;AACpC,WAAKC,QAAL,CAAc;AAAEhB,QAAAA,MAAM,EAAEe,QAAQ,CAACE,IAAT,CAAcC;AAAxB,OAAd;AACD,KAFD;AAGD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,SAAD;AACE,MAAA,QAAQ,EAAE,KAAKZ,iBADjB;AAEE,MAAA,YAAY,EAAEa,IAAI,IAAKA,IAAI,GAAGA,IAAI,CAACV,KAAR,GAAgB,EAF7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAKG,CAAC;AACAW,MAAAA,YADA;AAEAC,MAAAA,aAFA;AAGAC,MAAAA,YAHA;AAIAC,MAAAA,gBAJA;AAKAC,MAAAA,MALA;AAMAC,MAAAA,UANA;AAOAC,MAAAA;AAPA,KAAD,KASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAGE;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,MAAb;AAAqBC,QAAAA,OAAO,EAAE;AAA9B;AADT,OAEMF,aAAa,EAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAHF,EAQW,GARX,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,+IAaE,+CACML,aAAa,CAAC;AAChBQ,MAAAA,WAAW,EAAE,eADG;AAEhBC,MAAAA,QAAQ,EAAE,KAAK5B;AAFC,KAAD,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAbF,yEAoBGsB,MAAM,GACL;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AACD,SAAK1B,KAAL,CAAWC,MAAX,CACGgC,MADH,CAEIZ,IAAI,IACF,CAACM,UAAD,IACAN,IAAI,CAACV,KAAL,CACGuB,WADH,GAEGC,QAFH,CAEYR,UAAU,CAACO,WAAX,EAFZ,CAJN,EAQGE,KARH,CAQS,CART,EAQY,EARZ,EAQgB;AACd;AATF,KAUGC,GAVH,CAUO,CAAChB,IAAD,EAAOiB,KAAP,KACH;AACE,MAAA,SAAS,EAAC;AADZ,OAEMd,YAAY,CAAC;AAAEe,MAAAA,GAAG,EAAED,KAAP;AAAcA,MAAAA,KAAd;AAAqBjB,MAAAA;AAArB,KAAD,CAFlB;AAGE,MAAA,KAAK,EAAE;AACLmB,QAAAA,eAAe,EACbf,gBAAgB,KAAKa,KAArB,GAA6B,WAA7B,GAA2C,OAFxC;AAGLG,QAAAA,UAAU,EAAEnB,YAAY,KAAKD,IAAjB,GAAwB,MAAxB,GAAiC;AAHxC,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASGA,IAAI,CAACV,KATR,CAXJ,CAFF,CADK,GA2BH,IA/CN,CAdJ,CADF;AAmED;;AA/FiD","sourcesContent":["import React, { Component } from \"react\";\r\nimport Downshift from \"downshift\";\r\nimport axios from \"axios\";\r\n\r\nexport default class DownshiftTwo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movies: []\r\n    };\r\n    this.fetchMovies = this.fetchMovies.bind(this);\r\n    this.inputOnChange = this.inputOnChange.bind(this);\r\n  }\r\n  // onChange method for the input field\r\n  inputOnChange(event) {\r\n    if (!event.target.value) {\r\n      return;\r\n    }\r\n    this.fetchMovies(event.target.value);\r\n  }\r\n  // input field for the <Downshift /> component\r\n  downshiftOnChange(selectedMovie) {\r\n    alert(`your favourite movie is ${selectedMovie.title}`);\r\n  }\r\n  // method to fetch the movies from the movies API\r\n  fetchMovies(movie) {\r\n    const moviesURL = `https://api.themoviedb.org/3/search/movie?api_key=1b5adf76a72a13bad99b8fc0c68cb085&query=${movie}`;\r\n    axios.get(moviesURL).then(response => {\r\n      this.setState({ movies: response.data.results });\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <Downshift\r\n        onChange={this.downshiftOnChange}\r\n        itemToString={item => (item ? item.title : \"\")}\r\n      >\r\n        // pass the downshift props into a callback\r\n        {({\r\n          selectedItem,\r\n          getInputProps,\r\n          getItemProps,\r\n          highlightedIndex,\r\n          isOpen,\r\n          inputValue,\r\n          getLabelProps\r\n        }) => (\r\n          <div>\r\n            // add a label tag and pass our label text to the getLabelProps\r\n            function\r\n            <label\r\n              style={{ marginTop: \"1rem\", display: \"block\" }}\r\n              {...getLabelProps()}\r\n            >\r\n              Choose your favourite movie\r\n            </label>{\" \"}\r\n            <br />\r\n            // add a input tag and pass our placeholder text to the\r\n            getInputProps function. We also have an onChange eventlistener on\r\n            the input field\r\n            <input\r\n              {...getInputProps({\r\n                placeholder: \"Search movies\",\r\n                onChange: this.inputOnChange\r\n              })}\r\n            />\r\n            // if the input element is open, render the div else render nothing\r\n            {isOpen ? (\r\n              <div className=\"downshift-dropdown\">\r\n                {// filter the movies in the state\r\n                this.state.movies\r\n                  .filter(\r\n                    item =>\r\n                      !inputValue ||\r\n                      item.title\r\n                        .toLowerCase()\r\n                        .includes(inputValue.toLowerCase())\r\n                  )\r\n                  .slice(0, 10) // return just the first ten. Helps improve performance\r\n                  // map the filtered movies and display their title\r\n                  .map((item, index) => (\r\n                    <div\r\n                      className=\"dropdown-item\"\r\n                      {...getItemProps({ key: index, index, item })}\r\n                      style={{\r\n                        backgroundColor:\r\n                          highlightedIndex === index ? \"lightgray\" : \"white\",\r\n                        fontWeight: selectedItem === item ? \"bold\" : \"normal\"\r\n                      }}\r\n                    >\r\n                      {item.title}\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        )}\r\n      </Downshift>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}