{"ast":null,"code":"// Apply LZW-compression to a string and return base64 compressed string.\nexport function zip(s) {\n  try {\n    var dict = {};\n    var data = (s + \"\").split(\"\");\n    var out = [];\n    var currChar;\n    var phrase = data[0];\n    var code = 256;\n\n    for (var i = 1; i < data.length; i++) {\n      currChar = data[i];\n\n      if (dict[phrase + currChar] != null) {\n        phrase += currChar;\n      } else {\n        out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));\n        dict[phrase + currChar] = code;\n        code++;\n        phrase = currChar;\n      }\n    }\n\n    out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));\n\n    for (var j = 0; j < out.length; j++) {\n      out[j] = String.fromCharCode(out[j]);\n    }\n\n    return utoa(out.join(\"\"));\n  } catch (e) {\n    console.log(\"Failed to zip string return empty string\", e);\n    return \"\";\n  }\n} // Decompress an LZW-encoded base64 string\n\nexport function unzip(base64ZippedString) {\n  try {\n    var s = atou(base64ZippedString);\n    var dict = {};\n    var data = (s + \"\").split(\"\");\n    var currChar = data[0];\n    var oldPhrase = currChar;\n    var out = [currChar];\n    var code = 256;\n    var phrase;\n\n    for (var i = 1; i < data.length; i++) {\n      var currCode = data[i].charCodeAt(0);\n\n      if (currCode < 256) {\n        phrase = data[i];\n      } else {\n        phrase = dict[currCode] ? dict[currCode] : oldPhrase + currChar;\n      }\n\n      out.push(phrase);\n      currChar = phrase.charAt(0);\n      dict[code] = oldPhrase + currChar;\n      code++;\n      oldPhrase = phrase;\n    }\n\n    return out.join(\"\");\n  } catch (e) {\n    console.log(\"Failed to unzip string return empty string\", e);\n    return \"\";\n  }\n} // ucs-2 string to base64 encoded ascii\n\nfunction utoa(str) {\n  return window.btoa(unescape(encodeURIComponent(str)));\n} // base64 encoded ascii to ucs-2 string\n\n\nfunction atou(str) {\n  return decodeURIComponent(escape(window.atob(str)));\n} // LZW-compress a string\n\n\nexport function lzw_encode(s) {\n  var dict = {};\n  var data = (s + \"\").split(\"\");\n  var out = [];\n  var currChar;\n  var phrase = data[0];\n  var code = 256;\n\n  for (var i = 1; i < data.length; i++) {\n    currChar = data[i];\n\n    if (dict[phrase + currChar] != null) {\n      phrase += currChar;\n    } else {\n      out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));\n      dict[phrase + currChar] = code;\n      code++;\n      phrase = currChar;\n    }\n  }\n\n  out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));\n\n  for (var i = 0; i < out.length; i++) {\n    out[i] = String.fromCharCode(out[i]);\n  }\n\n  return out.join(\"\");\n} // Decompress an LZW-encoded string\n\nexport function lzw_decode(s) {\n  var dict = {};\n  var data = (s + \"\").split(\"\");\n  var currChar = data[0];\n  var oldPhrase = currChar;\n  var out = [currChar];\n  var code = 256;\n  var phrase;\n\n  for (var i = 1; i < data.length; i++) {\n    var currCode = data[i].charCodeAt(0);\n\n    if (currCode < 256) {\n      phrase = data[i];\n    } else {\n      phrase = dict[currCode] ? dict[currCode] : oldPhrase + currChar;\n    }\n\n    out.push(phrase);\n    currChar = phrase.charAt(0);\n    dict[code] = oldPhrase + currChar;\n    code++;\n    oldPhrase = phrase;\n  }\n\n  return out.join(\"\");\n}","map":{"version":3,"sources":["D:\\Projetos\\PPMTool-React-Client\\src\\Utils\\Zip.js"],"names":["zip","s","dict","data","split","out","currChar","phrase","code","i","length","push","charCodeAt","j","String","fromCharCode","utoa","join","e","console","log","unzip","base64ZippedString","atou","oldPhrase","currCode","charAt","str","window","btoa","unescape","encodeURIComponent","decodeURIComponent","escape","atob","lzw_encode","lzw_decode"],"mappings":"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","sourcesContent":["// Apply LZW-compression to a string and return base64 compressed string.\r\nexport function zip(s) {\r\n  try {\r\n    var dict = {};\r\n    var data = (s + \"\").split(\"\");\r\n    var out = [];\r\n    var currChar;\r\n    var phrase = data[0];\r\n    var code = 256;\r\n    for (var i = 1; i < data.length; i++) {\r\n      currChar = data[i];\r\n      if (dict[phrase + currChar] != null) {\r\n        phrase += currChar;\r\n      } else {\r\n        out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));\r\n        dict[phrase + currChar] = code;\r\n        code++;\r\n        phrase = currChar;\r\n      }\r\n    }\r\n    out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));\r\n    for (var j = 0; j < out.length; j++) {\r\n      out[j] = String.fromCharCode(out[j]);\r\n    }\r\n    return utoa(out.join(\"\"));\r\n  } catch (e) {\r\n    console.log(\"Failed to zip string return empty string\", e);\r\n    return \"\";\r\n  }\r\n}\r\n\r\n// Decompress an LZW-encoded base64 string\r\nexport function unzip(base64ZippedString) {\r\n  try {\r\n    var s = atou(base64ZippedString);\r\n    var dict = {};\r\n    var data = (s + \"\").split(\"\");\r\n    var currChar = data[0];\r\n    var oldPhrase = currChar;\r\n    var out = [currChar];\r\n    var code = 256;\r\n    var phrase;\r\n    for (var i = 1; i < data.length; i++) {\r\n      var currCode = data[i].charCodeAt(0);\r\n      if (currCode < 256) {\r\n        phrase = data[i];\r\n      } else {\r\n        phrase = dict[currCode] ? dict[currCode] : oldPhrase + currChar;\r\n      }\r\n      out.push(phrase);\r\n      currChar = phrase.charAt(0);\r\n      dict[code] = oldPhrase + currChar;\r\n      code++;\r\n      oldPhrase = phrase;\r\n    }\r\n    return out.join(\"\");\r\n  } catch (e) {\r\n    console.log(\"Failed to unzip string return empty string\", e);\r\n    return \"\";\r\n  }\r\n}\r\n\r\n// ucs-2 string to base64 encoded ascii\r\nfunction utoa(str) {\r\n  return window.btoa(unescape(encodeURIComponent(str)));\r\n}\r\n// base64 encoded ascii to ucs-2 string\r\nfunction atou(str) {\r\n  return decodeURIComponent(escape(window.atob(str)));\r\n}\r\n\r\n// LZW-compress a string\r\nexport function lzw_encode(s) {\r\n  var dict = {};\r\n  var data = (s + \"\").split(\"\");\r\n  var out = [];\r\n  var currChar;\r\n  var phrase = data[0];\r\n  var code = 256;\r\n  for (var i = 1; i < data.length; i++) {\r\n    currChar = data[i];\r\n    if (dict[phrase + currChar] != null) {\r\n      phrase += currChar;\r\n    } else {\r\n      out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));\r\n      dict[phrase + currChar] = code;\r\n      code++;\r\n      phrase = currChar;\r\n    }\r\n  }\r\n  out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));\r\n  for (var i = 0; i < out.length; i++) {\r\n    out[i] = String.fromCharCode(out[i]);\r\n  }\r\n  return out.join(\"\");\r\n}\r\n\r\n// Decompress an LZW-encoded string\r\nexport function lzw_decode(s) {\r\n  var dict = {};\r\n  var data = (s + \"\").split(\"\");\r\n  var currChar = data[0];\r\n  var oldPhrase = currChar;\r\n  var out = [currChar];\r\n  var code = 256;\r\n  var phrase;\r\n  for (var i = 1; i < data.length; i++) {\r\n    var currCode = data[i].charCodeAt(0);\r\n    if (currCode < 256) {\r\n      phrase = data[i];\r\n    } else {\r\n      phrase = dict[currCode] ? dict[currCode] : oldPhrase + currChar;\r\n    }\r\n    out.push(phrase);\r\n    currChar = phrase.charAt(0);\r\n    dict[code] = oldPhrase + currChar;\r\n    code++;\r\n    oldPhrase = phrase;\r\n  }\r\n  return out.join(\"\");\r\n}\r\n"]},"metadata":{},"sourceType":"module"}