{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, GET_PROFILE_BACKLOG, GET_PROFILE_TASK, DELETE_PROFILE_TASK } from \"./types\"; //Fix bug with priority in Spring Boot Server, needs to check null first\n\nexport const addProfileTask = (profile_backlog_id, profile_task, history) => async dispatch => {\n  try {\n    await axios.post(\"/api/cvbacklog/\".concat(profile_backlog_id), profile_task);\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n    history.push(\"/editcv/\".concat(profile_backlog_id));\n  } catch (err) {\n    if (err.response.data.tokenMessage || err.response.data.profileNotfound) {\n      history.push(\"/infoPage/\".concat(profile_backlog_id));\n    }\n\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const getProfileBacklog = (profile_backlog_id, history) => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/cvbacklog/\".concat(profile_backlog_id));\n    dispatch({\n      type: GET_PROFILE_BACKLOG,\n      payload: res.data\n    });\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const getProfileTask = (profile_backlog_id, pt_id, history) => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/cvbacklog/\".concat(profile_backlog_id, \"/\").concat(pt_id));\n    dispatch({\n      type: GET_PROFILE_TASK,\n      payload: res.data\n    });\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const updateProfileTask = (profile_backlog_id, pt_id, profile_task, history) => async dispatch => {\n  try {\n    await axios.patch(\"/api/cvbacklog/\".concat(profile_backlog_id, \"/\").concat(pt_id), profile_task);\n    dispatch({\n      type: GET_PROFILE_TASK,\n      payload: {}\n    });\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n    history.push(\"/editcv/\".concat(profile_backlog_id));\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const deleteProfileTask = (profile_backlog_id, pt_id) => async dispatch => {\n  if (window.confirm(\"You are deleting profile task \".concat(pt_id, \", this action cannot be undone\"))) {\n    await axios.delete(\"/api/cvbacklog/\".concat(profile_backlog_id, \"/\").concat(pt_id));\n    dispatch({\n      type: DELETE_PROFILE_TASK,\n      payload: pt_id\n    });\n  }\n};","map":{"version":3,"sources":["D:\\Projetos\\PPMTool-React-Client\\src\\actions\\profileBacklogActions.js"],"names":["axios","GET_ERRORS","GET_PROFILE_BACKLOG","GET_PROFILE_TASK","DELETE_PROFILE_TASK","addProfileTask","profile_backlog_id","profile_task","history","dispatch","post","type","payload","push","err","response","data","tokenMessage","profileNotfound","getProfileBacklog","res","get","getProfileTask","pt_id","updateProfileTask","patch","deleteProfileTask","window","confirm","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  GET_ERRORS,\r\n  GET_PROFILE_BACKLOG,\r\n  GET_PROFILE_TASK,\r\n  DELETE_PROFILE_TASK\r\n} from \"./types\";\r\n\r\n//Fix bug with priority in Spring Boot Server, needs to check null first\r\nexport const addProfileTask = (\r\n  profile_backlog_id,\r\n  profile_task,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    await axios.post(`/api/cvbacklog/${profile_backlog_id}`, profile_task);\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n    history.push(`/editcv/${profile_backlog_id}`);\r\n  } catch (err) {\r\n    if (err.response.data.tokenMessage || err.response.data.profileNotfound) {\r\n      history.push(`/infoPage/${profile_backlog_id}`);\r\n    }\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProfileBacklog = (\r\n  profile_backlog_id,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`/api/cvbacklog/${profile_backlog_id}`);\r\n    dispatch({\r\n      type: GET_PROFILE_BACKLOG,\r\n      payload: res.data\r\n    });\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProfileTask = (\r\n  profile_backlog_id,\r\n  pt_id,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    const res = await axios.get(\r\n      `/api/cvbacklog/${profile_backlog_id}/${pt_id}`\r\n    );\r\n    dispatch({\r\n      type: GET_PROFILE_TASK,\r\n      payload: res.data\r\n    });\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateProfileTask = (\r\n  profile_backlog_id,\r\n  pt_id,\r\n  profile_task,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    await axios.patch(\r\n      `/api/cvbacklog/${profile_backlog_id}/${pt_id}`,\r\n      profile_task\r\n    );\r\n    dispatch({\r\n      type: GET_PROFILE_TASK,\r\n      payload: {}\r\n    });\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n    history.push(`/editcv/${profile_backlog_id}`);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteProfileTask = (\r\n  profile_backlog_id,\r\n  pt_id\r\n) => async dispatch => {\r\n  if (\r\n    window.confirm(\r\n      `You are deleting profile task ${pt_id}, this action cannot be undone`\r\n    )\r\n  ) {\r\n    await axios.delete(`/api/cvbacklog/${profile_backlog_id}/${pt_id}`);\r\n    dispatch({\r\n      type: DELETE_PROFILE_TASK,\r\n      payload: pt_id\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}