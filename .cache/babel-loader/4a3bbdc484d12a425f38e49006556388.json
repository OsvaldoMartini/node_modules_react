{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyledSegments = exports.getBrowserConsoleArgs = exports.getSrcChalkColor = exports.LEVEL_NUM_TO_COLORED_STR = undefined;\n\nvar _timm = require('timm');\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _lodash = require('../vendor/lodash');\n\nvar _ = _interopRequireWildcard(_lodash);\n\nvar _constants = require('./constants');\n\nvar k = _interopRequireWildcard(_constants);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // We must ensure that `chalk` is enabled already; otherwise,\n// all of the following constant definitions will be monochrome\n\n\n_chalk2.default.enabled = true; // -------------------------------------------------\n// Map severity level to a colored string\n// -------------------------------------------------\n\nvar LEVEL_NUM_TO_COLORED_STR = {};\nObject.keys(k.LEVEL_NUM_TO_STR).forEach(function (key) {\n  var num = Number(key);\n  var str = k.LEVEL_NUM_TO_STR[key];\n  var col = _chalk2.default.grey;\n\n  if (num === 30) {\n    col = k.IS_BROWSER ? _chalk2.default.bold : _chalk2.default.white;\n  } else if (num === 40) {\n    col = _chalk2.default.yellow;\n  } else if (num >= 50) {\n    col = _chalk2.default.red;\n  }\n\n  LEVEL_NUM_TO_COLORED_STR[num] = col(_.padEnd(str, 6));\n}); // -------------------------------------------------\n// Get a color for a given src (cached)\n// -------------------------------------------------\n\nvar COLORS = [];\nvar BASE_COLORS = ['cyan', 'yellow', 'red', 'green', 'blue', 'magenta'];\nBASE_COLORS.forEach(function (col) {\n  COLORS.push(_chalk2.default[col].bold);\n});\nBASE_COLORS.forEach(function (col) {\n  COLORS.push(_chalk2.default[col]);\n});\nvar NUM_COLORS = COLORS.length;\nvar srcColorCache = {};\nvar _srcCnt = 0;\n/* eslint-disable no-plusplus */\n\nvar getSrcChalkColor = function getSrcChalkColor(src) {\n  if (srcColorCache[src] == null) {\n    srcColorCache[src] = COLORS[_srcCnt++ % NUM_COLORS];\n  }\n\n  return srcColorCache[src];\n};\n/* eslint-enable no-plusplus */\n// -------------------------------------------------\n// Convert ANSI codes to console args and styled segments\n// -------------------------------------------------\n\n/* eslint-disable max-len */\n\n\nvar ANSI_REGEX = /(?:(?:\\u001b\\[)|\\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\\u001b[A-M]/g;\n/* eslint-enable max-len */\n\nvar ANSI_ADD = {\n  1: 'BOLD',\n  2: 'DIM',\n  3: 'ITALIC',\n  4: 'UNDERLINE',\n  7: 'INVERSE',\n  8: 'HIDDEN',\n  9: 'STRIKETHROUGH'\n};\nvar ANSI_ADD_COLOR = {\n  30: 'BLACK',\n  31: 'RED',\n  32: 'GREEN',\n  33: 'YELLOW',\n  34: 'BLUE',\n  94: 'BLUE',\n  35: 'MAGENTA',\n  36: 'CYAN',\n  37: 'WHITE',\n  90: 'GREY'\n};\nvar ANSI_ADD_BGCOLOR = {\n  40: 'BLACK',\n  41: 'RED',\n  42: 'GREEN',\n  43: 'YELLOW',\n  44: 'BLUE',\n  45: 'MAGENTA',\n  46: 'CYAN',\n  47: 'WHITE'\n};\nvar ANSI_REMOVE = {\n  // 0, 39, 49: handled manually\n  21: ['BOLD'],\n  22: ['BOLD', 'DIM'],\n  23: ['ITALIC'],\n  24: ['UNDERLINE'],\n  27: ['INVERSE'],\n  28: ['HIDDEN'],\n  29: ['STRIKETHROUGH']\n};\nvar CSS_COLORS = {\n  BLACK: 'black',\n  RED: '#cc0000',\n  GREEN: 'green',\n  YELLOW: '#ff6600',\n  BLUE: 'blue',\n  MAGENTA: 'magenta',\n  CYAN: 'darkturquoise',\n  WHITE: 'lightgrey',\n  GREY: 'grey'\n};\nvar CSS_STYLES = {\n  BOLD: 'font-weight: bold',\n  DIM: 'opacity: 0.8',\n  ITALIC: 'font-style: italic',\n  UNDERLINE: 'text-decoration: underline',\n  INVERSE: '',\n  HIDDEN: 'display: none',\n  STRIKETHROUGH: 'text-decoration: line-through'\n};\nvar REACT_STYLES = {\n  BOLD: {\n    fontWeight: 'bold'\n  },\n  DIM: {\n    opacity: 0.8\n  },\n  ITALIC: {\n    fontStyle: 'italic'\n  },\n  UNDERLINE: {\n    textDecoration: 'underline'\n  },\n  INVERSE: {},\n  HIDDEN: {\n    display: 'none'\n  },\n  STRIKETHROUGH: {\n    textDecoration: 'line-through'\n  }\n};\n\nvar getBrowserConsoleArgs = function getBrowserConsoleArgs(str) {\n  var outStr = str.replace(ANSI_REGEX, '%c');\n  var argArray = [outStr];\n  var curStyles = {};\n  var regex = /\\u001b\\[(\\d+)*m/gi;\n  var res = void 0;\n\n  while (res = regex.exec(str)) {\n    curStyles = updateStyles(curStyles, Number(res[1]));\n    argArray.push(toConsoleArgs(curStyles));\n  }\n\n  return argArray;\n};\n\nvar getStyledSegments = function getStyledSegments(str) {\n  var out = [];\n  if (!_.isString(str)) return out;\n  var tokens = str.split(/\\u001b\\[(\\d+)*m/gi);\n  var curStyles = {};\n  var text = tokens[0];\n  if (text.length) out.push({\n    text: text,\n    style: {}\n  });\n\n  for (var idx = 1; idx < tokens.length; idx += 2) {\n    curStyles = updateStyles(curStyles, Number(tokens[idx]));\n    text = tokens[idx + 1];\n    if (!text.length) continue;\n    out.push({\n      text: text,\n      style: toSegmentStyle(curStyles)\n    });\n  }\n\n  return out;\n};\n/* eslint-disable no-param-reassign */\n\n\nvar updateStyles = function updateStyles(curStyles, code) {\n  var style = void 0;\n  var color = void 0;\n  var bgColor = void 0;\n  var removeStyles = void 0;\n\n  if (style = ANSI_ADD[code]) {\n    curStyles[style] = true;\n  } else if (color = ANSI_ADD_COLOR[code]) {\n    curStyles.color = color;\n  } else if (bgColor = ANSI_ADD_BGCOLOR[code]) {\n    curStyles.bgColor = bgColor;\n  } else if (code === 39) {\n    curStyles.color = undefined;\n  } else if (code === 49) {\n    curStyles.bgColor = undefined;\n  } else if (removeStyles = ANSI_REMOVE[code]) {\n    for (var i = 0; i < removeStyles.length; i++) {\n      style = removeStyles[i];\n      curStyles[style] = undefined;\n    }\n  } else if (code === 0) {\n    curStyles = {};\n  }\n\n  return curStyles;\n};\n/* eslint-enable no-param-reassign */\n\n\nvar toConsoleArgs = function toConsoleArgs(styles) {\n  var out = [];\n  Object.keys(styles).forEach(function (key) {\n    var val = styles[key];\n    if (val == null) return;\n\n    switch (key) {\n      case 'color':\n        out.push('color: ' + CSS_COLORS[val]);\n        break;\n\n      case 'bgColor':\n        out.push('color: white; background-color: ' + CSS_COLORS[val]);\n        break;\n\n      default:\n        out.push(CSS_STYLES[key]);\n    }\n  });\n  return out.join(';');\n};\n\nvar toSegmentStyle = function toSegmentStyle(styles) {\n  var out = {};\n  Object.keys(styles).forEach(function (key) {\n    var val = styles[key];\n    if (val == null) return;\n\n    switch (key) {\n      case 'color':\n        out.color = CSS_COLORS[val];\n        break;\n\n      case 'bgColor':\n        out.color = 'white';\n        out.backgroundColor = CSS_COLORS[val];\n        break;\n\n      default:\n        out = (0, _timm.merge)(out, REACT_STYLES[key]);\n    }\n  });\n  return out;\n}; // -------------------------------------------------\n// Public API\n// -------------------------------------------------\n\n\nexports.LEVEL_NUM_TO_COLORED_STR = LEVEL_NUM_TO_COLORED_STR;\nexports.getSrcChalkColor = getSrcChalkColor;\nexports.getBrowserConsoleArgs = getBrowserConsoleArgs;\nexports.getStyledSegments = getStyledSegments;","map":null,"metadata":{},"sourceType":"script"}