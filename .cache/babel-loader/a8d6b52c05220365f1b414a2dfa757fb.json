{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return _objectSpread({}, navigationOptions, configurer(_objectSpread({}, configProps, {\n      navigationOptions: navigationOptions\n    })));\n  }\n\n  if (typeof configurer === 'object') {\n    return _objectSpread({}, navigationOptions, configurer);\n  }\n\n  return navigationOptions;\n}\n\nexport default (function (routeConfigs, navigatorScreenConfig) {\n  return function (navigation, screenProps) {\n    var state = navigation.state;\n    var route = state;\n    invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n    var Component = getScreenForRouteName(routeConfigs, route.routeName);\n    var routeConfig = routeConfigs[route.routeName];\n    var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;\n    var componentScreenConfig = Component.navigationOptions;\n    var configOptions = {\n      navigation: navigation,\n      screenProps: screenProps || {}\n    };\n    var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n    validateScreenOptions(outputConfig, route);\n    return outputConfig;\n  };\n});","map":null,"metadata":{},"sourceType":"module"}