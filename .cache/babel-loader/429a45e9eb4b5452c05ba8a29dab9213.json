{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zipSave = exports.zipSetBase64 = exports.zipSetBinary = exports.zipSetText = exports.zipGetText = exports.zipExists = exports.zipLoad = exports.zipInit = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _jszip = require('jszip');\n\nvar _jszip2 = _interopRequireDefault(_jszip);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar zipInit = function zipInit() {\n  initCache();\n};\n/* eslint-disable new-cap */\n\n\nvar zipLoad = function zipLoad(inputFile) {\n  return _jszip2.default.loadAsync(inputFile);\n};\n\nvar zipExists = function zipExists(zip, filename) {\n  return zip.file(filename) != null;\n};\n\nvar zipGetText = function zipGetText(zip, filename) {\n  return getFile(zip, filename, 'text');\n};\n\nvar zipSetText = function zipSetText(zip, filename, data) {\n  return setFile(zip, filename, data);\n};\n\nvar zipSetBinary = function zipSetBinary(zip, filename, data) {\n  return setFile(zip, filename, data, {\n    binary: true\n  });\n};\n\nvar zipSetBase64 = function zipSetBase64(zip, filename, data) {\n  return setFile(zip, filename, data, {\n    base64: true\n  });\n};\n\nvar zipSave = function zipSave(zip) {\n  return zip.generateAsync({\n    type: 'uint8array',\n    compression: 'DEFLATE',\n    compressionOptions: {\n      level: 1\n    }\n  });\n}; // ==========================================\n// Cache outputs (so that they can be requested again)\n// ==========================================\n\n\nvar cache = {};\n\nvar getFile = function () {\n  var _ref = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee(zip, filename, format) {\n    var out;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(cache[filename] !== undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt('return', cache[filename]);\n\n          case 2:\n            out = void 0;\n            _context.prev = 3;\n            _context.next = 6;\n            return zip.file(filename).async(format);\n\n          case 6:\n            out = _context.sent;\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context['catch'](3);\n            out = null;\n\n          case 12:\n            cache[filename] = out;\n            return _context.abrupt('return', out);\n\n          case 14:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined, [[3, 9]]);\n  }));\n\n  return function getFile(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar setFile = function setFile(zip, filename, data, options) {\n  cache[filename] = data;\n  return zip.file(filename, data, options);\n};\n\nvar initCache = function initCache() {\n  cache = {};\n}; // ==========================================\n// Public API\n// ==========================================\n\n\nexports.zipInit = zipInit;\nexports.zipLoad = zipLoad;\nexports.zipExists = zipExists;\nexports.zipGetText = zipGetText;\nexports.zipSetText = zipSetText;\nexports.zipSetBinary = zipSetBinary;\nexports.zipSetBase64 = zipSetBase64;\nexports.zipSave = zipSave;","map":null,"metadata":{},"sourceType":"script"}