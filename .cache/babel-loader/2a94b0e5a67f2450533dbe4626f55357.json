{"ast":null,"code":"import { I18nManager } from 'react-native';\nimport getSceneIndicesForInterpolationInputRange from '../../utils/getSceneIndicesForInterpolationInputRange';\nvar EPS = 1e-5;\n\nfunction forInitial(props) {\n  var navigation = props.navigation,\n      scene = props.scene;\n  var focused = navigation.state.index === scene.index;\n  var opacity = focused ? 1 : 0;\n  var translate = focused ? 0 : 1000000;\n  return {\n    opacity: opacity,\n    transform: [{\n      translateX: translate\n    }, {\n      translateY: translate\n    }]\n  };\n}\n\nfunction forHorizontal(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var width = layout.initWidth;\n  var translateX = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3],\n    extrapolate: 'clamp'\n  });\n  var shadowOpacity = props.shadowEnabled ? position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 0.7, 0],\n    extrapolate: 'clamp'\n  }) : null;\n  var overlayOpacity = props.cardOverlayEnabled ? position.interpolate({\n    inputRange: [index, last - 0.5, last, last + EPS],\n    outputRange: [0, 0.07, 0.07, 0],\n    extrapolate: 'clamp'\n  }) : null;\n  return {\n    transform: [{\n      translateX: translateX\n    }],\n    overlayOpacity: overlayOpacity,\n    shadowOpacity: shadowOpacity\n  };\n}\n\nfunction forVertical(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var height = layout.initHeight;\n  var translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [height, 0, 0],\n    extrapolate: 'clamp'\n  });\n  return {\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFadeFromBottomAndroid(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, first + 0.5, first + 0.9, index, last - 1e-5, last],\n    outputRange: [0, 0.25, 0.7, 1, 1, 0],\n    extrapolate: 'clamp'\n  });\n  var height = layout.initHeight;\n  var maxTranslation = height * 0.08;\n  var translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity: opacity,\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFadeToBottomAndroid(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var inputRange = [first, index, last];\n  var opacity = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n  var height = layout.initHeight;\n  var maxTranslation = height * 0.08;\n  var translateY = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity: opacity,\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFade(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity: opacity\n  };\n}\n\nfunction forNoAnimation() {\n  return {};\n}\n\nexport default {\n  forHorizontal: forHorizontal,\n  forVertical: forVertical,\n  forFadeFromBottomAndroid: forFadeFromBottomAndroid,\n  forFadeToBottomAndroid: forFadeToBottomAndroid,\n  forFade: forFade,\n  forNoAnimation: forNoAnimation\n};","map":null,"metadata":{},"sourceType":"module"}