{"ast":null,"code":"'use strict'; // most of this code was written by Andrew Kelley\n// licensed under the BSD license: see\n// https://github.com/andrewrk/node-mv/blob/master/package.json\n// this needs a cleanup\n\nconst u = require('universalify').fromCallback;\n\nconst fs = require('graceful-fs');\n\nconst ncp = require('../copy/ncp');\n\nconst path = require('path');\n\nconst remove = require('../remove').remove;\n\nconst mkdirp = require('../mkdirs').mkdirs;\n\nfunction move(source, dest, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  const shouldMkdirp = 'mkdirp' in options ? options.mkdirp : true;\n  const overwrite = options.overwrite || options.clobber || false;\n\n  if (shouldMkdirp) {\n    mkdirs();\n  } else {\n    doRename();\n  }\n\n  function mkdirs() {\n    mkdirp(path.dirname(dest), err => {\n      if (err) return callback(err);\n      doRename();\n    });\n  }\n\n  function doRename() {\n    if (path.resolve(source) === path.resolve(dest)) {\n      fs.access(source, callback);\n    } else if (overwrite) {\n      fs.rename(source, dest, err => {\n        if (!err) return callback();\n\n        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {\n          remove(dest, err => {\n            if (err) return callback(err);\n            options.overwrite = false; // just overwriteed it, no need to do it again\n\n            move(source, dest, options, callback);\n          });\n          return;\n        } // weird Windows shit\n\n\n        if (err.code === 'EPERM') {\n          setTimeout(() => {\n            remove(dest, err => {\n              if (err) return callback(err);\n              options.overwrite = false;\n              move(source, dest, options, callback);\n            });\n          }, 200);\n          return;\n        }\n\n        if (err.code !== 'EXDEV') return callback(err);\n        moveAcrossDevice(source, dest, overwrite, callback);\n      });\n    } else {\n      fs.link(source, dest, err => {\n        if (err) {\n          if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {\n            moveAcrossDevice(source, dest, overwrite, callback);\n            return;\n          }\n\n          callback(err);\n          return;\n        }\n\n        fs.unlink(source, callback);\n      });\n    }\n  }\n}\n\nfunction moveAcrossDevice(source, dest, overwrite, callback) {\n  fs.stat(source, (err, stat) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (stat.isDirectory()) {\n      moveDirAcrossDevice(source, dest, overwrite, callback);\n    } else {\n      moveFileAcrossDevice(source, dest, overwrite, callback);\n    }\n  });\n}\n\nfunction moveFileAcrossDevice(source, dest, overwrite, callback) {\n  const flags = overwrite ? 'w' : 'wx';\n  const ins = fs.createReadStream(source);\n  const outs = fs.createWriteStream(dest, {\n    flags\n  });\n  ins.on('error', err => {\n    ins.destroy();\n    outs.destroy();\n    outs.removeListener('close', onClose); // may want to create a directory but `out` line above\n    // creates an empty file for us: See #108\n    // don't care about error here\n\n    fs.unlink(dest, () => {\n      // note: `err` here is from the input stream errror\n      if (err.code === 'EISDIR' || err.code === 'EPERM') {\n        moveDirAcrossDevice(source, dest, overwrite, callback);\n      } else {\n        callback(err);\n      }\n    });\n  });\n  outs.on('error', err => {\n    ins.destroy();\n    outs.destroy();\n    outs.removeListener('close', onClose);\n    callback(err);\n  });\n  outs.once('close', onClose);\n  ins.pipe(outs);\n\n  function onClose() {\n    fs.unlink(source, callback);\n  }\n}\n\nfunction moveDirAcrossDevice(source, dest, overwrite, callback) {\n  const options = {\n    overwrite: false\n  };\n\n  if (overwrite) {\n    remove(dest, err => {\n      if (err) return callback(err);\n      startNcp();\n    });\n  } else {\n    startNcp();\n  }\n\n  function startNcp() {\n    ncp(source, dest, options, err => {\n      if (err) return callback(err);\n      remove(source, callback);\n    });\n  }\n}\n\nmodule.exports = {\n  move: u(move)\n};","map":null,"metadata":{},"sourceType":"script"}