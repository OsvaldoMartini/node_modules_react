{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/brentvatne/coding/react-navigation-stack/src/views/StackView/StackView.tsx\";\nimport * as React from 'react';\nimport { StackActions } from '@react-navigation/core';\nimport StackViewLayout from './StackViewLayout';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nvar USE_NATIVE_DRIVER = true;\nvar DefaultNavigationConfig = {\n  mode: 'card',\n  cardShadowEnabled: true,\n  cardOverlayEnabled: false\n};\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  function StackView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.configureTransition = function (transitionProps, prevTransitionProps) {\n      return _objectSpread({\n        useNativeDriver: USE_NATIVE_DRIVER\n      }, TransitionConfigs.getTransitionConfig(_this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, _this.props.navigationConfig.mode === 'modal').transitionSpec);\n    };\n\n    _this.getShadowEnabled = function () {\n      var navigationConfig = _this.props.navigationConfig;\n      return navigationConfig && navigationConfig.hasOwnProperty('cardShadowEnabled') ? navigationConfig.cardShadowEnabled : DefaultNavigationConfig.cardShadowEnabled;\n    };\n\n    _this.getCardOverlayEnabled = function () {\n      var navigationConfig = _this.props.navigationConfig;\n      return navigationConfig && navigationConfig.hasOwnProperty('cardOverlayEnabled') ? navigationConfig.cardOverlayEnabled : DefaultNavigationConfig.cardOverlayEnabled;\n    };\n\n    _this.renderStackviewLayout = function (transitionProps, lastTransitionProps) {\n      var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          navigationConfig = _this$props.navigationConfig;\n      return React.createElement(StackViewLayout, _extends({}, navigationConfig, {\n        shadowEnabled: _this.getShadowEnabled(),\n        cardOverlayEnabled: _this.getCardOverlayEnabled(),\n        onGestureBegin: _this.props.onGestureBegin,\n        onGestureCanceled: _this.props.onGestureCanceled,\n        onGestureEnd: _this.props.onGestureEnd,\n        screenProps: screenProps,\n        transitionProps: transitionProps,\n        lastTransitionProps: lastTransitionProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        }\n      }));\n    };\n\n    _this.handleTransitionEnd = function (transition, lastTransition) {\n      var _this$props2 = _this.props,\n          navigationConfig = _this$props2.navigationConfig,\n          navigation = _this$props2.navigation,\n          _this$props2$onTransi = _this$props2.onTransitionEnd,\n          onTransitionEnd = _this$props2$onTransi === void 0 ? navigationConfig.onTransitionEnd : _this$props2$onTransi;\n      var transitionDestKey = transition.scene.route.key;\n      var isCurrentKey = navigation.state.routes[navigation.state.index].key === transitionDestKey;\n\n      if (transition.navigation.state.isTransitioning && isCurrentKey) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: transitionDestKey\n        }));\n      }\n\n      onTransitionEnd && onTransitionEnd(transition, lastTransition);\n    };\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Transitioner, {\n        render: this.renderStackviewLayout,\n        configureTransition: this.configureTransition,\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        onTransitionStart: this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart,\n        onTransitionEnd: this.handleTransitionEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var navigation = this.props.navigation;\n\n      if (navigation.state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key\n        }));\n      }\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport default StackView;","map":null,"metadata":{},"sourceType":"module"}