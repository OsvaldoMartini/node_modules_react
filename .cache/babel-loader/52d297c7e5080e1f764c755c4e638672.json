{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/brentvatne/coding/react-navigation-stack/src/views/Transitioner.tsx\";\nimport * as React from 'react';\nimport { Animated, Easing, StyleSheet, View } from 'react-native';\nimport NavigationScenesReducer from './ScenesReducer';\nvar DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing\n};\n\nvar Transitioner = function (_React$Component) {\n  _inherits(Transitioner, _React$Component);\n\n  function Transitioner(_props) {\n    var _this;\n\n    _classCallCheck(this, Transitioner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transitioner).call(this, _props));\n\n    _this.computeScenes = function (props, nextProps) {\n      var nextScenes = NavigationScenesReducer(_this.state.scenes, nextProps.navigation.state, props.navigation.state, nextProps.descriptors);\n\n      if (!nextProps.navigation.state.isTransitioning) {\n        nextScenes = filterStale(nextScenes);\n      }\n\n      if (nextProps.screenProps !== _this.props.screenProps) {\n        _this.setState({\n          nextScenes: nextScenes\n        });\n      }\n\n      if (nextScenes === _this.state.scenes) {\n        return;\n      }\n\n      return nextScenes;\n    };\n\n    _this.handleLayout = function (event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          height = _event$nativeEvent$la.height,\n          width = _event$nativeEvent$la.width;\n\n      if (_this.state.layout.initWidth === width && _this.state.layout.initHeight === height) {\n        return;\n      }\n\n      var layout = _objectSpread({}, _this.state.layout, {\n        initHeight: height,\n        initWidth: width,\n        isMeasured: true\n      });\n\n      layout.height.setValue(height);\n      layout.width.setValue(width);\n\n      var nextState = _objectSpread({}, _this.state, {\n        layout: layout\n      });\n\n      _this.transitionProps = buildTransitionProps(_this.props, nextState);\n\n      _this.setState(nextState);\n    };\n\n    _this.handleTransitionEnd = function () {\n      if (!_this.isComponentMounted) {\n        return;\n      }\n\n      var prevTransitionProps = _this.prevTransitionProps;\n      _this.prevTransitionProps = undefined;\n      var scenes = filterStale(_this.state.scenes);\n\n      var nextState = _objectSpread({}, _this.state, {\n        scenes: scenes\n      });\n\n      _this.transitionProps = buildTransitionProps(_this.props, nextState);\n\n      _this.setState(nextState, function _callee() {\n        var result, prevProps;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this.props.onTransitionEnd) {\n                  _context.next = 5;\n                  break;\n                }\n\n                result = _this.props.onTransitionEnd(_this.transitionProps, prevTransitionProps);\n\n                if (!(result instanceof Promise)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(result);\n\n              case 5:\n                if (_this.queuedTransition) {\n                  prevProps = _this.queuedTransition.prevProps;\n                  _this.queuedTransition = null;\n\n                  _this.startTransition(prevProps, _this.props);\n                } else {\n                  _this.isTransitionRunning = false;\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        });\n      });\n    };\n\n    var _layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0)\n    };\n    var position = new Animated.Value(_this.props.navigation.state.index);\n    _this.positionListener = position.addListener(function () {});\n    _this.state = {\n      layout: _layout,\n      position: position,\n      scenes: NavigationScenesReducer([], _this.props.navigation.state, null, _this.props.descriptors)\n    };\n    _this.prevTransitionProps = undefined;\n    _this.transitionProps = buildTransitionProps(_props, _this.state);\n    _this.isComponentMounted = false;\n    _this.isTransitionRunning = false;\n    _this.queuedTransition = null;\n    return _this;\n  }\n\n  _createClass(Transitioner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.isComponentMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isComponentMounted = false;\n      this.positionListener && this.state.position.removeListener(this.positionListener);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.isTransitionRunning) {\n        if (!this.queuedTransition) {\n          this.queuedTransition = {\n            prevProps: this.props\n          };\n        }\n\n        return;\n      }\n\n      this.startTransition(this.props, nextProps);\n    }\n  }, {\n    key: \"startTransition\",\n    value: function startTransition(props, nextProps) {\n      var _this2 = this;\n\n      var indexHasChanged = props.navigation.state.index !== nextProps.navigation.state.index;\n      var nextScenes = this.computeScenes(props, nextProps);\n\n      if (!nextScenes) {\n        this.prevTransitionProps = this.transitionProps;\n        this.state.position.setValue(props.navigation.state.index);\n        this.handleTransitionEnd();\n        return;\n      }\n\n      var nextState = _objectSpread({}, this.state, {\n        scenes: nextScenes\n      });\n\n      var position = nextState.position;\n      var toValue = nextProps.navigation.state.index;\n      this.prevTransitionProps = this.transitionProps;\n      this.transitionProps = buildTransitionProps(nextProps, nextState);\n      var isTransitioning = this.transitionProps.navigation.state.isTransitioning;\n\n      if (!isTransitioning || !indexHasChanged) {\n        this.setState(nextState, function _callee2() {\n          var result;\n          return _regeneratorRuntime.async(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!nextProps.onTransitionStart) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  result = nextProps.onTransitionStart(_this2.transitionProps, _this2.prevTransitionProps);\n\n                  if (!(result instanceof Promise)) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  _context2.next = 5;\n                  return _regeneratorRuntime.awrap(result);\n\n                case 5:\n                  indexHasChanged && position.setValue(toValue);\n\n                  _this2.handleTransitionEnd();\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          });\n        });\n      } else if (isTransitioning) {\n        this.isTransitionRunning = true;\n        this.setState(nextState, function _callee3() {\n          var result, transitionUserSpec, transitionSpec, timing, positionHasChanged;\n          return _regeneratorRuntime.async(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!nextProps.onTransitionStart) {\n                    _context3.next = 5;\n                    break;\n                  }\n\n                  result = nextProps.onTransitionStart(_this2.transitionProps, _this2.prevTransitionProps);\n\n                  if (!(result instanceof Promise)) {\n                    _context3.next = 5;\n                    break;\n                  }\n\n                  _context3.next = 5;\n                  return _regeneratorRuntime.awrap(result);\n\n                case 5:\n                  transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(_this2.transitionProps, _this2.prevTransitionProps) : null;\n                  transitionSpec = _objectSpread({}, DefaultTransitionSpec, transitionUserSpec);\n                  timing = transitionSpec.timing;\n                  delete transitionSpec.timing;\n                  positionHasChanged = position.__getValue() !== toValue;\n\n                  if (indexHasChanged && positionHasChanged) {\n                    timing(position, _objectSpread({}, transitionSpec, {\n                      toValue: nextProps.navigation.state.index\n                    })).start(function () {\n                      requestAnimationFrame(_this2.handleTransitionEnd);\n                    });\n                  } else {\n                    _this2.handleTransitionEnd();\n                  }\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        onLayout: this.handleLayout,\n        style: styles.main,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        }\n      }, this.props.render(this.transitionProps, this.prevTransitionProps));\n    }\n  }]);\n\n  return Transitioner;\n}(React.Component);\n\nfunction buildTransitionProps(props, state) {\n  var navigation = props.navigation;\n  var layout = state.layout,\n      position = state.position,\n      scenes = state.scenes;\n  var scene = scenes.find(isSceneActive);\n\n  if (!scene) {\n    throw new Error('Could not find active scene');\n  }\n\n  return {\n    layout: layout,\n    navigation: navigation,\n    position: position,\n    scenes: scenes,\n    scene: scene,\n    index: scene.index\n  };\n}\n\nfunction isSceneNotStale(scene) {\n  return !scene.isStale;\n}\n\nfunction filterStale(scenes) {\n  var filtered = scenes.filter(isSceneNotStale);\n\n  if (filtered.length === scenes.length) {\n    return scenes;\n  }\n\n  return filtered;\n}\n\nfunction isSceneActive(scene) {\n  return scene.isActive;\n}\n\nvar styles = StyleSheet.create({\n  main: {\n    flex: 1\n  }\n});\nexport default Transitioner;","map":null,"metadata":{},"sourceType":"module"}