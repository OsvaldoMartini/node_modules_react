{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport { setJWTToken, setJWTTokenCandidate } from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\nexport const createNewUser = (newUser, history) => async dispatch => {\n  try {\n    await axios.post(\"/api/users/register\", newUser);\n    const LoginRequest = {\n      username: newUser.username,\n      password: newUser.password\n    }; //history.push(\"/login\");\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: LoginRequest\n    });\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const login = LoginRequest => async dispatch => {\n  // post => Login Request\n  // extract token from res.data\n  // store the token in the localstorage\n  // set our token in header ***\n  // decode token onn React\n  // dispatch to our securityReducer\n  try {\n    // post => Login Request\n    const res = await axios.post(\"/api/users/login\", LoginRequest); // extract token from res.data\n\n    const token = res.data.token;\n\n    if (token && typeof token !== \"undefined\") {\n      localStorage.removeItem(\"jwtTokenCandidate\"); // store the token in the localStorage\n\n      localStorage.setItem(\"jwtToken\", token); // set our token in header ***\n\n      setJWTToken(token); // decode token on React\n\n      const decoded = jwt_decode(token);\n      console.log(decoded); // dispatch to our securityReducer\n\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: decoded\n      });\n      dispatch({\n        type: GET_ERRORS,\n        payload: {}\n      });\n    } else {\n      const err = {\n        username: \"Invalid Username\",\n        password: \"Invalid Password\"\n      };\n      dispatch({\n        type: GET_ERRORS,\n        payload: err\n      });\n    }\n  } catch (err) {\n    const username = err.response.data.username;\n\n    if (username) {\n      //history.push(`/infoPage/${LoginRequest.username}`);\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    } else if (err.message && LoginRequest.username) {\n      //err.response.data.push({ message: err.message });\n      window.location.href = \"/infoPage/\".concat(LoginRequest.username);\n      dispatch({\n        type: GET_ERRORS,\n        payload: err\n      });\n    } else if (err.message) {\n      //err.response.data.push({ message: err.message });\n      window.location.href = \"/infoPage/\".concat(err.message);\n      dispatch({\n        type: GET_ERRORS,\n        payload: err\n      });\n    }\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  localStorage.removeItem(\"jwtTokenCandidate\");\n  setJWTToken(false);\n  setJWTTokenCandidate(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n};","map":{"version":3,"sources":["D:\\Projetos\\PPMTool-React-Client\\src\\actions\\securityActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_USER","setJWTToken","setJWTTokenCandidate","jwt_decode","createNewUser","newUser","history","dispatch","post","LoginRequest","username","password","type","payload","err","response","data","login","res","token","localStorage","removeItem","setItem","decoded","console","log","message","window","location","href","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\r\nimport {\r\n  setJWTToken,\r\n  setJWTTokenCandidate\r\n} from \"../securityUtils/setJWTToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nexport const createNewUser = (newUser, history) => async dispatch => {\r\n  try {\r\n    await axios.post(\"/api/users/register\", newUser);\r\n    const LoginRequest = {\r\n      username: newUser.username,\r\n      password: newUser.password\r\n    };\r\n    //history.push(\"/login\");\r\n\r\n    dispatch({\r\n      type: SET_CURRENT_USER,\r\n      payload: LoginRequest\r\n    });\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const login = LoginRequest => async dispatch => {\r\n  // post => Login Request\r\n  // extract token from res.data\r\n  // store the token in the localstorage\r\n  // set our token in header ***\r\n  // decode token onn React\r\n  // dispatch to our securityReducer\r\n\r\n  try {\r\n    // post => Login Request\r\n    const res = await axios.post(\"/api/users/login\", LoginRequest);\r\n    // extract token from res.data\r\n    const { token } = res.data;\r\n\r\n    if (token && typeof token !== \"undefined\") {\r\n      localStorage.removeItem(\"jwtTokenCandidate\");\r\n\r\n      // store the token in the localStorage\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // set our token in header ***\r\n      setJWTToken(token);\r\n      // decode token on React\r\n      const decoded = jwt_decode(token);\r\n      console.log(decoded);\r\n\r\n      // dispatch to our securityReducer\r\n      dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded\r\n      });\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: {}\r\n      });\r\n    } else {\r\n      const err = {\r\n        username: \"Invalid Username\",\r\n        password: \"Invalid Password\"\r\n      };\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err\r\n      });\r\n    }\r\n  } catch (err) {\r\n    const { username } = err.response.data;\r\n    if (username) {\r\n      //history.push(`/infoPage/${LoginRequest.username}`);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      });\r\n    } else if (err.message && LoginRequest.username) {\r\n      //err.response.data.push({ message: err.message });\r\n      window.location.href = `/infoPage/${LoginRequest.username}`;\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err\r\n      });\r\n    } else if (err.message) {\r\n      //err.response.data.push({ message: err.message });\r\n      window.location.href = `/infoPage/${err.message}`;\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n  localStorage.removeItem(\"jwtToken\");\r\n  localStorage.removeItem(\"jwtTokenCandidate\");\r\n  setJWTToken(false);\r\n  setJWTTokenCandidate(false);\r\n  dispatch({\r\n    type: SET_CURRENT_USER,\r\n    payload: {}\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}