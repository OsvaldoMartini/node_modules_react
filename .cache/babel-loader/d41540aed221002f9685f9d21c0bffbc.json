{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _lodash = require('../vendor/lodash');\n\nvar _ = _interopRequireWildcard(_lodash);\n\nvar _serialize = require('./serialize');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar WRAPPER_KEY = '__SB_WRAPPER__';\nvar BUFFER_EXPLICIT_LIMIT = 40;\n\nvar isBuffer = function isBuffer(val) {\n  return val instanceof Buffer;\n};\n\nvar tree = function tree(node, options, prefix, stack) {\n  var out = [];\n  var _options$ignoreKeys = options.ignoreKeys,\n      ignoreKeys = _options$ignoreKeys === undefined ? [] : _options$ignoreKeys;\n  stack.push(node);\n  var postponedArrayAttrs = [];\n  var postponedObjectAttrs = [];\n  var keys = Object.keys(node);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var val = node[key];\n\n    if (ignoreKeys.indexOf(key) >= 0) {\n      continue;\n    }\n\n    var finalPrefix = key === WRAPPER_KEY ? prefix : '' + prefix + key + ': ';\n\n    if (_.isObject(val) && stack.indexOf(val) >= 0 || // Avoid circular dependencies\n    val === _serialize.CIRCULAR_REF) {\n      out.push(finalPrefix + _chalk2.default.green.bold('[CIRCULAR]'));\n    } else if (Array.isArray(val) && val.length === 0) {\n      out.push(finalPrefix + _chalk2.default.bold('[]'));\n    } else if (Array.isArray(val) && val.length && _.isString(val[0])) {\n      var strVal = _.map(val, function (o) {\n        return '\\'' + o + '\\'';\n      }).join(', ');\n\n      strVal = _chalk2.default.yellow.bold('[' + strVal + ']');\n      out.push(finalPrefix + strVal);\n    } else if (_.isDate(val)) {\n      out.push(finalPrefix + _chalk2.default.magenta.bold(val.toISOString()));\n    } else if (isBuffer(val)) {\n      var str = val.slice(0, BUFFER_EXPLICIT_LIMIT).toString('hex').toUpperCase().match(/(..)/g).join(' ');\n      if (val.length > BUFFER_EXPLICIT_LIMIT) str += '...';\n      str = 'Buffer [' + val.length + ']: ' + str;\n      out.push(finalPrefix + _chalk2.default.magenta.bold(str));\n    } else if (_.isObject(val) && Object.keys(val).length === 0) {\n      out.push(finalPrefix + _chalk2.default.bold('{}'));\n    } else if (Array.isArray(val)) {\n      postponedArrayAttrs.push(key);\n    } else if (_.isObject(val)) {\n      postponedObjectAttrs.push(key);\n    } else if (_.isString(val)) {\n      var lines = val.split('\\n');\n\n      if (lines.length === 1) {\n        out.push(finalPrefix + _chalk2.default.yellow.bold('\\'' + val + '\\''));\n      } else {\n        for (var m = 0, len = lines.length; m < len; m++) {\n          var line = lines[m];\n          out.push(finalPrefix + _chalk2.default.yellow.bold(line));\n        }\n      }\n    } else if (val === null) {\n      out.push(finalPrefix + _chalk2.default.red.bold('null'));\n    } else if (val === undefined) {\n      out.push(finalPrefix + _chalk2.default.bgRed.bold('undefined'));\n    } else if (val === true || val === false) {\n      out.push(finalPrefix + _chalk2.default.cyan.bold(val));\n    } else if (_.isNumber(val)) {\n      out.push(finalPrefix + _chalk2.default.blue.bold(val));\n    } else {\n      /* istanbul ignore next */\n      out.push(finalPrefix + _chalk2.default.bold(val));\n    }\n  }\n\n  for (var j = 0; j < postponedObjectAttrs.length; j++) {\n    var _key = postponedObjectAttrs[j];\n    var _val = node[_key];\n    out.push('' + prefix + _key + ':');\n    out = out.concat(tree(_val, options, options.indenter + prefix, stack));\n  }\n\n  for (var k = 0; k < postponedArrayAttrs.length; k++) {\n    var _key2 = postponedArrayAttrs[k];\n    var _val2 = node[_key2];\n    out.push('' + prefix + _key2 + ':');\n    out = out.concat(tree(_val2, options, options.indenter + prefix, stack));\n  }\n\n  stack.pop();\n  return out;\n};\n\nvar treeLines = function treeLines(obj0) {\n  var options0 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = options0;\n  if (options.indenter == null) options.indenter = '  ';\n  var prefix = options.prefix || '';\n  var obj = obj0;\n\n  if (_.isError(obj)) {\n    obj = _.pick(obj, ['name', 'message', 'stack']);\n  } else if (!_.isObject(obj) || isBuffer(obj)) {\n    obj = _defineProperty({}, WRAPPER_KEY, obj);\n  }\n\n  return tree(obj, options, prefix, []);\n};\n/* eslint-disable no-console */\n\n\ntreeLines.log = function () {\n  var lines = treeLines.apply(undefined, arguments);\n\n  for (var i = 0, len = lines.length; i < len; i++) {\n    var line = lines[i];\n    console.log(line);\n  }\n};\n/* eslint-enable no-console */\n\n\nexports.default = treeLines;","map":null,"metadata":{},"sourceType":"script"}