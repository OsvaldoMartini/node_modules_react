{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projetos\\\\PPMTool-React-Client\\\\src\\\\components\\\\controlls\\\\DownshiftThree.js\";\nimport React, { Component } from \"react\";\nimport Downshift from \"downshift\";\nexport default class DownshiftThree extends Component {\n  constructor(props) {\n    super(props);\n    this.books = [{\n      name: \"Harry Potter\"\n    }, {\n      name: \"Net Moves\"\n    }, {\n      name: \"Half of a yellow sun\"\n    }, {\n      name: \"The Da Vinci Code\"\n    }, {\n      name: \"Born a crime\"\n    }];\n    this.state = {\n      // currently selected dropdown item\n      selectedBook: \"\"\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(selectedBook) {\n    this.setState({\n      selectedBook: selectedBook.name\n    });\n  }\n\n  render() {\n    return React.createElement(Downshift, {\n      onChange: this.onChange,\n      selectedItem: this.state.selectedBook,\n      itemToString: books => books ? books.name : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"// pass the downshift props into a callback\", ({\n      isOpen,\n      getToggleButtonProps,\n      getItemProps,\n      highlightedIndex,\n      selectedItem: dsSelectedItem,\n      getLabelProps\n    }) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"// add a label tag and pass our label text to the getLabelProps function\", React.createElement(\"label\", Object.assign({\n      style: {\n        marginTop: \"1rem\",\n        display: \"block\"\n      }\n    }, getLabelProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), \"Select your favourite book\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), \"// add a button for our dropdown and pass the selected book as its content if there's a selected item\", React.createElement(\"button\", Object.assign({\n      className: \"dropdown-button\"\n    }, getToggleButtonProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), this.state.selectedBook !== \"\" ? this.state.selectedBook : \"Select a book ...\"), React.createElement(\"div\", {\n      style: {\n        position: \"relative\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"// if the input element is open, render the div else render nothing\", isOpen ? React.createElement(\"div\", {\n      className: \"downshift-dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, // map through all the books and render them\n    this.books.map((item, index) => React.createElement(\"div\", Object.assign({\n      className: \"dropdown-item\"\n    }, getItemProps({\n      key: index,\n      index,\n      item\n    }), {\n      style: {\n        backgroundColor: highlightedIndex === index ? \"lightgray\" : \"white\",\n        fontWeight: dsSelectedItem === item ? \"bold\" : \"normal\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), item.name))) : null)));\n  }\n\n}","map":{"version":3,"sources":["D:\\Projetos\\PPMTool-React-Client\\src\\components\\controlls\\DownshiftThree.js"],"names":["React","Component","Downshift","DownshiftThree","constructor","props","books","name","state","selectedBook","onChange","bind","setState","render","isOpen","getToggleButtonProps","getItemProps","highlightedIndex","selectedItem","dsSelectedItem","getLabelProps","marginTop","display","position","map","item","index","key","backgroundColor","fontWeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,eAAe,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AACpDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,CACX;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADW,EAEX;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAFW,EAGX;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAHW,EAIX;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAJW,EAKX;AAAEA,MAAAA,IAAI,EAAE;AAAR,KALW,CAAb;AAQA,SAAKC,KAAL,GAAa;AACX;AACAC,MAAAA,YAAY,EAAE;AAFH,KAAb;AAKA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AAEDD,EAAAA,QAAQ,CAACD,YAAD,EAAe;AACrB,SAAKG,QAAL,CAAc;AAAEH,MAAAA,YAAY,EAAEA,YAAY,CAACF;AAA7B,KAAd;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,SAAD;AACE,MAAA,QAAQ,EAAE,KAAKH,QADjB;AAEE,MAAA,YAAY,EAAE,KAAKF,KAAL,CAAWC,YAF3B;AAGE,MAAA,YAAY,EAAEH,KAAK,IAAKA,KAAK,GAAGA,KAAK,CAACC,IAAT,GAAgB,EAH/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAMG,CAAC;AACAO,MAAAA,MADA;AAEAC,MAAAA,oBAFA;AAGAC,MAAAA,YAHA;AAIAC,MAAAA,gBAJA;AAKAC,MAAAA,YAAY,EAAEC,cALd;AAMAC,MAAAA;AANA,KAAD,KAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAGE;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,MAAb;AAAqBC,QAAAA,OAAO,EAAE;AAA9B;AADT,OAEMF,aAAa,EAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAHF,EAQW,GARX,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,2GAYE;AAAQ,MAAA,SAAS,EAAC;AAAlB,OAAwCL,oBAAoB,EAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACG,KAAKP,KAAL,CAAWC,YAAX,KAA4B,EAA5B,GACG,KAAKD,KAAL,CAAWC,YADd,GAEG,mBAHN,CAZF,EAiBE;AAAK,MAAA,KAAK,EAAE;AAAEc,QAAAA,QAAQ,EAAE;AAAZ,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAGGT,MAAM,GACL;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AACD,SAAKR,KAAL,CAAWkB,GAAX,CAAe,CAACC,IAAD,EAAOC,KAAP,KACb;AACE,MAAA,SAAS,EAAC;AADZ,OAEMV,YAAY,CAAC;AAAEW,MAAAA,GAAG,EAAED,KAAP;AAAcA,MAAAA,KAAd;AAAqBD,MAAAA;AAArB,KAAD,CAFlB;AAGE,MAAA,KAAK,EAAE;AACLG,QAAAA,eAAe,EACbX,gBAAgB,KAAKS,KAArB,GAA6B,WAA7B,GAA2C,OAFxC;AAGLG,QAAAA,UAAU,EAAEV,cAAc,KAAKM,IAAnB,GAA0B,MAA1B,GAAmC;AAH1C,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASGA,IAAI,CAAClB,IATR,CADF,CAFF,CADK,GAiBH,IApBN,CAjBF,CAdJ,CADF;AA0DD;;AAlFmD","sourcesContent":["import React, { Component } from \"react\";\r\nimport Downshift from \"downshift\";\r\n\r\nexport default class DownshiftThree extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.books = [\r\n      { name: \"Harry Potter\" },\r\n      { name: \"Net Moves\" },\r\n      { name: \"Half of a yellow sun\" },\r\n      { name: \"The Da Vinci Code\" },\r\n      { name: \"Born a crime\" }\r\n    ];\r\n\r\n    this.state = {\r\n      // currently selected dropdown item\r\n      selectedBook: \"\"\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  onChange(selectedBook) {\r\n    this.setState({ selectedBook: selectedBook.name });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Downshift\r\n        onChange={this.onChange}\r\n        selectedItem={this.state.selectedBook}\r\n        itemToString={books => (books ? books.name : \"\")}\r\n      >\r\n        // pass the downshift props into a callback\r\n        {({\r\n          isOpen,\r\n          getToggleButtonProps,\r\n          getItemProps,\r\n          highlightedIndex,\r\n          selectedItem: dsSelectedItem,\r\n          getLabelProps\r\n        }) => (\r\n          <div>\r\n            // add a label tag and pass our label text to the getLabelProps\r\n            function\r\n            <label\r\n              style={{ marginTop: \"1rem\", display: \"block\" }}\r\n              {...getLabelProps()}\r\n            >\r\n              Select your favourite book\r\n            </label>{\" \"}\r\n            <br />\r\n            // add a button for our dropdown and pass the selected book as its\r\n            content if there's a selected item\r\n            <button className=\"dropdown-button\" {...getToggleButtonProps()}>\r\n              {this.state.selectedBook !== \"\"\r\n                ? this.state.selectedBook\r\n                : \"Select a book ...\"}\r\n            </button>\r\n            <div style={{ position: \"relative\" }}>\r\n              // if the input element is open, render the div else render\r\n              nothing\r\n              {isOpen ? (\r\n                <div className=\"downshift-dropdown\">\r\n                  {// map through all the books and render them\r\n                  this.books.map((item, index) => (\r\n                    <div\r\n                      className=\"dropdown-item\"\r\n                      {...getItemProps({ key: index, index, item })}\r\n                      style={{\r\n                        backgroundColor:\r\n                          highlightedIndex === index ? \"lightgray\" : \"white\",\r\n                        fontWeight: dsSelectedItem === item ? \"bold\" : \"normal\"\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Downshift>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}