{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nvar _platform = require('platform');\n\nvar _platform2 = _interopRequireDefault(_platform);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _lodash = require('../vendor/lodash');\n\nvar _ = _interopRequireWildcard(_lodash);\n\nvar _constants = require('./constants');\n\nvar _filters = require('./filters');\n\nvar _hub = require('./hub');\n\nvar _serialize = require('./serialize');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar version = require('../../package.json').version;\n\nvar DEFAULT_SRC = 'main';\nvar DEFAULT_CHILD_TITLE = '';\n/* eslint-disable max-len */\n\nvar REVEAL_SEPARATOR_BEGIN = '\\u250C\\u2500\\u2500 REVEALED PAST LOGS BEGIN HERE (due to warning/error)';\n/* eslint-enable max-len */\n\nvar REVEAL_SEPARATOR_END = '\\u2514\\u2500\\u2500 REVEALED PAST LOGS END HERE'; // Record formats:\n// * 1 (or undefined): initial version\n// * 2: embeds objects directly, not their visual representation\n//   (does not call treeLines before attaching). Circular refs are removed\n// * 3: include type signalType\n\nvar RECORD_FORMAT_VERSION = 3;\nvar hiddenStories = {};\nvar hubId = (0, _hub.getHubId)(); // -----------------------------------------------\n// Helpers\n// -----------------------------------------------\n\nvar getStoryId = function getStoryId() {\n  return (_constants.IS_BROWSER ? 'cs/' : 'ss/') + _uuid2.default.v4();\n};\n\nvar getRecordId = function getRecordId() {\n  return (_constants.IS_BROWSER ? 'c-' : 's-') + _uuid2.default.v4();\n}; // -----------------------------------------------\n// Story\n// -----------------------------------------------\n\n\nfunction Story(_ref) {\n  var parents = _ref.parents,\n      src = _ref.src,\n      title = _ref.title,\n      levelNum = _ref.levelNum,\n      fHiddenByFilter = _ref.fHiddenByFilter;\n  this.parents = parents;\n  this.fRoot = !parents.length;\n  this.storyId = (this.fRoot ? '*/' : '') + getStoryId();\n  this.src = src;\n  this.title = title;\n  this.level = levelNum;\n  this.fServer = !_constants.IS_BROWSER;\n  this.t = new Date().getTime();\n  this.fOpen = true;\n  this.status = undefined;\n  this.hiddenRecords = [];\n  this.fHiddenByFilter = fHiddenByFilter || !(0, _filters.passesFilter)(this.src, this.level);\n\n  if (this.fHiddenByFilter) {\n    hiddenStories[this.storyId] = this;\n  }\n\n  this.emitAction('CREATED', this.t);\n} // -----------------------------------------------\n// Story lifecycle\n// -----------------------------------------------\n\n\nStory.prototype.close = function close() {\n  this.fOpen = false;\n  this.emitAction('CLOSED');\n\n  if (this.fHiddenByFilter) {\n    hiddenStories[this.storyId] = null;\n    this.hiddenRecords = [];\n  }\n};\n\nStory.prototype.changeTitle = function changeTitle(title) {\n  this.title = title;\n  this.emitAction('TITLE_CHANGED');\n};\n\nStory.prototype.changeStatus = function changeStatus(status) {\n  this.status = status;\n  this.emitAction('STATUS_CHANGED');\n};\n\nStory.prototype.child = function child() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var src = options.src,\n      title = options.title;\n  if (src == null) src = DEFAULT_SRC;\n  if (title == null) title = DEFAULT_CHILD_TITLE;\n  var extraParents = options.extraParents,\n      levelStr = options.level;\n  var levelNum = void 0;\n  if (levelStr != null) levelNum = _constants.LEVEL_STR_TO_NUM[levelStr.toUpperCase()];\n  if (levelNum == null) levelNum = _constants.LEVEL_STR_TO_NUM.INFO;\n  var parents = [this.storyId];\n  if (extraParents != null) parents = parents.concat(extraParents);\n  return new Story({\n    parents: parents,\n    src: src,\n    title: title,\n    levelNum: levelNum,\n    fHiddenByFilter: this.fHiddenByFilter\n  });\n}; // -----------------------------------------------\n// Logs\n// -----------------------------------------------\n\n\nObject.keys(_constants.LEVEL_STR_TO_NUM).forEach(function (levelStr) {\n  var levelNum = _constants.LEVEL_STR_TO_NUM[levelStr];\n\n  Story.prototype[levelStr.toLowerCase()] = function log() {\n    // Prepare arguments\n    var src = void 0;\n    var msg = void 0;\n    var options = void 0; // `log.info msg`\n\n    if (arguments.length <= 1) {\n      src = DEFAULT_SRC;\n      msg = (arguments.length <= 0 ? undefined : arguments[0]) != null ? arguments.length <= 0 ? undefined : arguments[0] : ''; // `log.info msg, options`\n    } else if (_.isObject(arguments.length <= 1 ? undefined : arguments[1])) {\n      src = DEFAULT_SRC;\n      msg = (arguments.length <= 0 ? undefined : arguments[0]) != null ? arguments.length <= 0 ? undefined : arguments[0] : '';\n      options = arguments.length <= 1 ? undefined : arguments[1];\n    } else {\n      src = arguments.length <= 0 ? undefined : arguments[0];\n      msg = arguments.length <= 1 ? undefined : arguments[1];\n      options = arguments.length <= 2 ? undefined : arguments[2];\n    }\n\n    if (options == null) options = {}; // Filtering rule #1\n\n    if (!(0, _filters.passesFilter)(src, levelNum)) return; // Prepare record\n\n    var record = {\n      storyId: this.storyId,\n      level: levelNum,\n      src: src,\n      msg: msg\n    };\n    processAttachments(record, options);\n    completeRecord(record); // Filtering rule #2, specific to hidden stories\n\n    if (this.fHiddenByFilter) {\n      if (levelNum < _constants.LEVEL_STR_TO_NUM.WARN) {\n        this.hiddenRecords.push(record);\n        return;\n      }\n\n      emitRevealSeparator(REVEAL_SEPARATOR_BEGIN);\n      this.reveal();\n      emitRevealSeparator(REVEAL_SEPARATOR_END);\n    }\n\n    emit(record);\n  };\n}); // -----------------------------------------------\n// Story helpers\n// -----------------------------------------------\n\nStory.prototype.emitAction = function emitAction(action, t) {\n  var record = {\n    parents: this.parents,\n    fRoot: this.fRoot,\n    storyId: this.storyId,\n    src: this.src,\n    title: this.title,\n    level: this.level,\n    fServer: this.fServer,\n    t: t,\n    fOpen: this.fOpen,\n    status: this.status,\n    fStory: true,\n    action: action\n  };\n  completeRecord(record);\n\n  if (this.fHiddenByFilter) {\n    this.hiddenRecords.push(record);\n    return;\n  }\n\n  emit(record);\n}; // Reveal parents recursively, and then reveal myself\n\n\nStory.prototype.reveal = function reveal() {\n  this.parents.forEach(function (parentStoryId) {\n    if (hiddenStories[parentStoryId] != null) {\n      hiddenStories[parentStoryId].reveal();\n    }\n  });\n  this.fHiddenByFilter = false;\n  hiddenStories[this.storyId] = null;\n  var hiddenRecords = this.hiddenRecords;\n\n  for (var j = 0; j < hiddenRecords.length; j++) {\n    emit(hiddenRecords[j]);\n  }\n\n  this.hiddenRecords = [];\n}; // Records can be logs or stories:\n// * Common to stories and logs:\n//   - `id: string` (a unique record id)\n//   - `hubId: string`\n//   - `version: integer`\n//   - `fStory: boolean`\n//   - `fServer: boolean`\n//   - `storyId: string`\n//   - `t: number` [ms] (for stories, creation time)\n//   - `src: string?`\n//   - `level: number`\n//   - `signalType: string` (undefined for ordinary, non-signalling records)\n// * Only for stories:\n//   - `fRoot: boolean`\n//   - `title: string?`\n//   - `action: string`\n//   - `parents: Array`\n// * Only for logs:\n//   - `msg: string`\n//   - `obj: object?`\n//   - `objExpanded: bool?`\n//   - `objLevel: integer?`\n//   - `objOptions: object?`\n//   - `objIsError: bool?`\n\n/* eslint-disable no-param-reassign */\n\n\nvar completeRecord = function completeRecord(record) {\n  record.id = getRecordId();\n  record.hubId = hubId;\n  record.version = RECORD_FORMAT_VERSION;\n  if (record.t == null) record.t = new Date().getTime();\n  record.fServer = !_constants.IS_BROWSER;\n  if (record.fStory == null) record.fStory = false;\n  if (record.fRoot == null) record.fRoot = false;\n};\n/* eslint-disable no-prototype-builtins */\n\n\nvar processAttachments = function processAttachments(record, options) {\n  if (options.hasOwnProperty('attach')) {\n    record.obj = options.attach;\n    record.objExpanded = !options.attachInline;\n  } else if (options.hasOwnProperty('attachInline')) {\n    record.obj = options.attachInline;\n    record.objExpanded = false;\n  }\n\n  if (record.hasOwnProperty('obj')) {\n    var objLevel = void 0;\n\n    if (options.attachLevel != null) {\n      objLevel = _constants.LEVEL_STR_TO_NUM[options.attachLevel.toUpperCase()];\n    }\n\n    if (objLevel == null) objLevel = record.level;\n    record.objLevel = objLevel;\n    record.objOptions = _.pick(options, ['ignoreKeys']);\n    record.objIsError = _.isError(record.obj);\n    record.obj = (0, _serialize.serialize)(record.obj);\n  }\n};\n/* eslint-enable no-prototype-builtins */\n\n/* eslint-enable no-param-reassign */\n\n\nvar emitRevealSeparator = function emitRevealSeparator(msg) {\n  var record = {\n    storyId: mainStory.storyId,\n    level: _constants.LEVEL_STR_TO_NUM.WARN,\n    src: 'storyboard',\n    msg: msg,\n    signalType: 'REVEAL_SEPARATOR'\n  };\n  completeRecord(record);\n  emit(record);\n};\n\nvar emit = function emit(record) {\n  (0, _hub.emitMsgWithFields)('STORIES', 'RECORDS', [record]);\n}; // -----------------------------------------------\n// Create the main story\n// -----------------------------------------------\n\n\nvar platformStr = _platform2.default.description + ', SB ' + version;\n\nvar title = 'ROOT STORY: ' + _chalk2.default.italic.blue.bold(platformStr);\n\nvar mainStory = new Story({\n  parents: [],\n  src: 'storyboard',\n  title: title,\n  levelNum: _constants.LEVEL_STR_TO_NUM.INFO\n}); // -----------------------------------------------\n// API\n// -----------------------------------------------\n\nexports.default = mainStory;","map":null,"metadata":{},"sourceType":"script"}