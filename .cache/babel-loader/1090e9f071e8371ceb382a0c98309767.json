{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projetos\\\\PPMTool-React-Client\\\\src\\\\components\\\\CVBoard\\\\ProfileTasks\\\\UpdateProfileTask.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getProfileTask, updateProfileTask } from \"../../../actions/profileBacklogActions\";\nimport PropTypes from \"prop-types\";\nimport EducationForm from \"./TasksForms/EducationForm\";\nimport SkillsForm from \"./TasksForms/SkillsForm\";\nimport LanguageForm from \"./TasksForms/LanguageForm\";\nimport ClientProjectForm from \"./TasksForms/ClientProjectForm\";\n\nclass UpdateProfileTask extends Component {\n  constructor(props) {\n    super(props);\n    const _this$props$match$par = this.props.match.params,\n          profile_backlog_id = _this$props$match$par.profile_backlog_id,\n          taskType = _this$props$match$par.taskType;\n    this.state = {\n      taskType: taskType,\n      priority: 0,\n      profileIdentifier: profile_backlog_id,\n      totalYears: 0,\n      profile: {},\n      errors: {}\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  } // componentDidMount() {\n  //   const { profile_backlog_id, pt_id } = this.props.match.params;\n  //   this.props.getProfileTask(profile_backlog_id, pt_id, this.props.history);\n  // }\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n\n    const _nextProps$profile_ta = nextProps.profile_task,\n          id = _nextProps$profile_ta.id,\n          profileSequence = _nextProps$profile_ta.profileSequence,\n          summary = _nextProps$profile_ta.summary,\n          acceptanceCriteria = _nextProps$profile_ta.acceptanceCriteria,\n          taskType = _nextProps$profile_ta.taskType,\n          totalYears = _nextProps$profile_ta.totalYears,\n          priority = _nextProps$profile_ta.priority,\n          dueDate = _nextProps$profile_ta.dueDate,\n          profileIdentifier = _nextProps$profile_ta.profileIdentifier,\n          create_At = _nextProps$profile_ta.create_At;\n    this.setState({\n      id,\n      profileSequence,\n      summary,\n      acceptanceCriteria,\n      taskType,\n      totalYears,\n      priority,\n      dueDate,\n      profileIdentifier,\n      create_At\n    });\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onChangeText(value) {\n    // if (/^\\d+$/.test(e.toString())) {\n    //   this.setState({ totalYears: e });\n    // }\n    if (value) {\n      if (!/^[0-9]+$/.test(value.toString())) {\n        this.setState({\n          totalYears: \"\"\n        });\n      } else {\n        this.setState({\n          totalYears: value.toString()\n        });\n      }\n    }\n  }\n\n  onSubmit(e) {\n    e.preventDefault(); // const UpdateProfileTask = {\n    //   id: this.state.id,\n    //   profileSequence: this.state.profileSequence,\n    //   summary: this.state.summary,\n    //   acceptanceCriteria: this.state.acceptanceCriteria,\n    //   taskType: this.state.taskType,\n    //   totalYears: this.state.totalYears,\n    //   priority: this.state.priority,\n    //   dueDate: this.state.dueDate,\n    //   profileIdentifier: this.state.profileIdentifier,\n    //   create_At: this.state.create_At\n    // };\n    // // console.log(UpdateProfileTask);\n    // this.props.updateProfileTask(\n    //   this.state.profileIdentifier,\n    //   this.state.profileSequence,\n    //   UpdateProfileTask,\n    //   this.props.history\n    // );\n  }\n\n  render() {\n    const _this$props$match$par2 = this.props.match.params,\n          profile_backlog_id = _this$props$match$par2.profile_backlog_id,\n          pt_id = _this$props$match$par2.pt_id,\n          taskType = _this$props$match$par2.taskType; //const { errors } = this.state;\n\n    const taskComponent = taskType => {\n      if (taskType === \"skill\") {\n        return React.createElement(SkillsForm, {\n          typeForm: \"Update\",\n          taskType: taskType,\n          history: this.props.history,\n          profileIdentifier: profileSequence,\n          profileSequence: pt_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        });\n      } else if (taskType === \"educ\") {\n        return React.createElement(EducationForm, {\n          typeForm: \"Update\",\n          taskType: taskType,\n          history: this.props.history,\n          profileIdentifier: profile_backlog_id,\n          profileSequence: pt_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        });\n      } else if (taskType === \"lang\") {\n        return React.createElement(LanguageForm, {\n          typeForm: \"Update\",\n          taskType: taskType,\n          history: this.props.history,\n          profileIdentifier: profile_backlog_id,\n          profileSequence: pt_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        });\n      } else if (taskType === \"cliPrj\") {\n        return React.createElement(ClientProjectForm, {\n          typeForm: \"Update\",\n          taskType: taskType,\n          history: this.props.history,\n          profileIdentifier: profile_backlog_id,\n          profileSequence: pt_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        });\n      }\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, taskComponent(taskType));\n  }\n\n}\n\nUpdateProfileTask.propTypes = {\n  getProfileTask: PropTypes.func.isRequired,\n  profile_task: PropTypes.object.isRequired,\n  updateProfileTask: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile_task: state.profileBacklog.profile_task,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  getProfileTask,\n  updateProfileTask\n})(UpdateProfileTask);","map":{"version":3,"sources":["D:\\Projetos\\PPMTool-React-Client\\src\\components\\CVBoard\\ProfileTasks\\UpdateProfileTask.js"],"names":["React","Component","connect","getProfileTask","updateProfileTask","PropTypes","EducationForm","SkillsForm","LanguageForm","ClientProjectForm","UpdateProfileTask","constructor","props","match","params","profile_backlog_id","taskType","state","priority","profileIdentifier","totalYears","profile","errors","onChange","bind","onSubmit","componentWillReceiveProps","nextProps","setState","profile_task","id","profileSequence","summary","acceptanceCriteria","dueDate","create_At","e","target","name","value","onChangeText","test","toString","preventDefault","render","pt_id","taskComponent","history","propTypes","func","isRequired","object","mapStateToProps","profileBacklog"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getProfileTask,\r\n  updateProfileTask\r\n} from \"../../../actions/profileBacklogActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport EducationForm from \"./TasksForms/EducationForm\";\r\nimport SkillsForm from \"./TasksForms/SkillsForm\";\r\nimport LanguageForm from \"./TasksForms/LanguageForm\";\r\nimport ClientProjectForm from \"./TasksForms/ClientProjectForm\";\r\n\r\nclass UpdateProfileTask extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { profile_backlog_id, taskType } = this.props.match.params;\r\n\r\n    this.state = {\r\n      taskType: taskType,\r\n      priority: 0,\r\n      profileIdentifier: profile_backlog_id,\r\n      totalYears: 0,\r\n      profile: {},\r\n      errors: {}\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   const { profile_backlog_id, pt_id } = this.props.match.params;\r\n  //   this.props.getProfileTask(profile_backlog_id, pt_id, this.props.history);\r\n  // }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n\r\n    const {\r\n      id,\r\n      profileSequence,\r\n      summary,\r\n      acceptanceCriteria,\r\n      taskType,\r\n      totalYears,\r\n      priority,\r\n      dueDate,\r\n      profileIdentifier,\r\n      create_At\r\n    } = nextProps.profile_task;\r\n\r\n    this.setState({\r\n      id,\r\n      profileSequence,\r\n      summary,\r\n      acceptanceCriteria,\r\n      taskType,\r\n      totalYears,\r\n      priority,\r\n      dueDate,\r\n      profileIdentifier,\r\n      create_At\r\n    });\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onChangeText(value) {\r\n    // if (/^\\d+$/.test(e.toString())) {\r\n    //   this.setState({ totalYears: e });\r\n    // }\r\n    if (value) {\r\n      if (!/^[0-9]+$/.test(value.toString())) {\r\n        this.setState({ totalYears: \"\" });\r\n      } else {\r\n        this.setState({ totalYears: value.toString() });\r\n      }\r\n    }\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    // const UpdateProfileTask = {\r\n    //   id: this.state.id,\r\n    //   profileSequence: this.state.profileSequence,\r\n    //   summary: this.state.summary,\r\n    //   acceptanceCriteria: this.state.acceptanceCriteria,\r\n    //   taskType: this.state.taskType,\r\n    //   totalYears: this.state.totalYears,\r\n    //   priority: this.state.priority,\r\n    //   dueDate: this.state.dueDate,\r\n    //   profileIdentifier: this.state.profileIdentifier,\r\n    //   create_At: this.state.create_At\r\n    // };\r\n\r\n    // // console.log(UpdateProfileTask);\r\n    // this.props.updateProfileTask(\r\n    //   this.state.profileIdentifier,\r\n    //   this.state.profileSequence,\r\n    //   UpdateProfileTask,\r\n    //   this.props.history\r\n    // );\r\n  }\r\n\r\n  render() {\r\n    const { profile_backlog_id, pt_id, taskType } = this.props.match.params;\r\n    //const { errors } = this.state;\r\n\r\n    const taskComponent = taskType => {\r\n      if (taskType === \"skill\") {\r\n        return (\r\n          <SkillsForm\r\n            typeForm=\"Update\"\r\n            taskType={taskType}\r\n            history={this.props.history}\r\n            profileIdentifier={profileSequence}\r\n            profileSequence={pt_id}\r\n          />\r\n        );\r\n      } else if (taskType === \"educ\") {\r\n        return (\r\n          <EducationForm\r\n            typeForm=\"Update\"\r\n            taskType={taskType}\r\n            history={this.props.history}\r\n            profileIdentifier={profile_backlog_id}\r\n            profileSequence={pt_id}\r\n          />\r\n        );\r\n      } else if (taskType === \"lang\") {\r\n        return (\r\n          <LanguageForm\r\n            typeForm=\"Update\"\r\n            taskType={taskType}\r\n            history={this.props.history}\r\n            profileIdentifier={profile_backlog_id}\r\n            profileSequence={pt_id}\r\n          />\r\n        );\r\n      } else if (taskType === \"cliPrj\") {\r\n        return (\r\n          <ClientProjectForm\r\n            typeForm=\"Update\"\r\n            taskType={taskType}\r\n            history={this.props.history}\r\n            profileIdentifier={profile_backlog_id}\r\n            profileSequence={pt_id}\r\n          />\r\n        );\r\n      }\r\n    };\r\n\r\n    return <div>{taskComponent(taskType)}</div>;\r\n  }\r\n}\r\n\r\nUpdateProfileTask.propTypes = {\r\n  getProfileTask: PropTypes.func.isRequired,\r\n  profile_task: PropTypes.object.isRequired,\r\n  updateProfileTask: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  profile_task: state.profileBacklog.profile_task,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getProfileTask, updateProfileTask }\r\n)(UpdateProfileTask);\r\n"]},"metadata":{},"sourceType":"module"}